<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx" 
				autoDrawBackground="false" height="100" width="100%">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;

			import moonshine.haxeScripts.valueObjects.ComponentVariantVO;

			import mx.formatters.DateFormatter;
			
			import spark.components.BusyIndicator;
			import spark.events.IndexChangeEvent;
			
			import actionScripts.utils.FileUtils;
			import actionScripts.utils.HelperUtils;
			import actionScripts.utils.Parser;
			import moonshine.haxeScripts.valueObjects.ComponentTypes;
			import moonshine.haxeScripts.valueObjects.ComponentVO;
			import moonshine.haxeScripts.valueObjects.ComponentVO;
			import actionScripts.valueObjects.HelperConstants;
			
			import moonshine.events.HelperEvent;
			
			[Bindable] private var isReDownloadAvailable:Boolean;
			
			private var busyIndicator:BusyIndicator;
			
			override public function set data(value:Object):void
			{
				if (value) 
				{
					super.data = value;
					
					// since using same List component with multiple
					// data sources, toggling creates type differences
					// to the containing object
					if (data is ComponentVO)
					{
						if (data.isDownloading && !busyIndicator)
						{
							busyIndicator = new BusyIndicator();
							busyIndicator.verticalCenter = 0;
							busyIndicator.right = 10;
							busyIndicator.width = 44;
							addElementAt(busyIndicator, 1);
						}
						else if (!data.isDownloading && busyIndicator)
						{
							busyIndicator.stopAllMovieClips();
							removeElement(busyIndicator);
							busyIndicator = null;
						}
						
						setUI();
					}
				}
			}
			
			protected function onDownloadRequest(event:MouseEvent):void
			{
				if (data.downloadVariants && data.downloadVariants.length > 1)
				{
					HelperUtils.updateComponentByVariant(data as ComponentVO,
						data.downloadVariants.get(data.selectedVariantIndex) as ComponentVariantVO);
				}
				
				this.dispatchEvent(new HelperEvent(HelperEvent.DOWNLOAD_COMPONENT, data, true));
			}
			
			protected function onOpenMoonshineSettings(event:MouseEvent):void
			{
				this.dispatchEvent(new HelperEvent(HelperEvent.OPEN_MOON_SETTINGS, data, true));
			}
			
			protected function onLogoClicked(event:MouseEvent):void
			{
				if (data.website) navigateToURL(new URLRequest(data.website), "_blank");
			}
			
			protected function onLicenseClick(event:MouseEvent):void
			{
				if (data.type == ComponentTypes.TYPE_FLEX ||
						data.type == ComponentTypes.TYPE_FLEX_HARMAN ||
						data.type == ComponentTypes.TYPE_SVN ||
					(HelperConstants.IS_MACOS && data.type == ComponentTypes.TYPE_GIT)) 
				{
					this.dispatchEvent(new HelperEvent(HelperEvent.OPEN_COMPONENT_LICENSE, data, true));
				}
				else 
				{
					navigateToURL(new URLRequest(data.licenseUrl), "_blank");
				}
			}
			
			protected function onVariantChange(event:IndexChangeEvent):void
			{
				var tmpVariant:ComponentVariantVO = event.target.selectedItem as ComponentVariantVO;
				var installToPath:String = Parser.getInstallDirectoryPath(data.type, tmpVariant.version);
				data.selectedVariantIndex = event.newIndex;
				data.isDownloaded = data.isAlreadyDownloaded = HelperUtils.isValidSDKDirectoryBy(data.type, installToPath, data.pathValidation);
				data.sizeInMb = tmpVariant.sizeInMb;
				data.createdOn = FileUtils.getCreationDateForPath(installToPath);
				
				// do update All Install button label
				this.dispatchEvent(new HelperEvent(HelperEvent.DOWNLOAD_VARIANT_CHANGED, null, true));
			}
			
			private function setUI():void
			{
				if (data.downloadVariants && data.downloadVariants.get(data.selectedVariantIndex).isReDownloadAvailable && 
					data.isAlreadyDownloaded && !data.isDownloading && !data.isSelectedToDownload && data.isDownloadable)
				{
					imgReDownload.includeInLayout = imgReDownload.visible = true;
				}
				else
				{
					imgReDownload.includeInLayout = imgReDownload.visible = false;
				}
				
				if (data.createdOn)
				{
					var tmpFormatter:DateFormatter = new DateFormatter();
					tmpFormatter.formatString = "MMM DD, YYYY";
					lblCreatedOn.text = "Installed: "+ tmpFormatter.format(data.createdOn);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%"
			  verticalAlign="middle" paddingRight="20">
		<s:Image source="{data.imagePath}"
				 width="136"
				 buttonMode="true" click="onLogoClicked(event)"/>
		<s:VGroup width="100%">
			<s:HGroup width="100%"
					  verticalAlign="middle">
				<s:Label text="{data.title}"
						 styleName="uiTextRendererLabel"/>
				<s:Label text="(v{data.version +', '+ HelperUtils.getSizeFix(data.sizeInMb)})"
						 styleName="uiTextRendererDescription" paddingLeft="6"/>
			</s:HGroup>
			<s:Label text="{data.description}" width="100%"
					 maxDisplayedLines="3" paddingTop="10"
					 styleName="uiTextRendererDescription"/>
			<s:HGroup width="100%" verticalAlign="middle">
				<s:Label text="License Agreement"
						 styleName="uiTextRendererDescription" textDecoration="underline" color="0x0099ff"
						 buttonMode="true" click="onLicenseClick(event)"
						 includeInLayout="{!HelperConstants.IS_RUNNING_IN_MOON}" visible="{!HelperConstants.IS_RUNNING_IN_MOON}"/>
				<s:Label text="|" color="0x666666"
						 includeInLayout="{!HelperConstants.IS_RUNNING_IN_MOON &amp;&amp; data.isAlreadyDownloaded}" 
						 visible="{!HelperConstants.IS_RUNNING_IN_MOON &amp;&amp; data.isAlreadyDownloaded}"/>
				<s:Label id="lblCreatedOn" 
						 styleName="uiTextRendererDescription" color="0x999999"
						 includeInLayout="{data.isAlreadyDownloaded &amp;&amp; data.createdOn}" 
						 visible="{data.isAlreadyDownloaded &amp;&amp; data.createdOn}"/>
			</s:HGroup>
		</s:VGroup>
		<s:HGroup autoLayout="true" verticalAlign="middle" horizontalAlign="right">
			<!--s:DropDownList id="ddlVariant" 
							dataProvider="{data.downloadVariants}"
							labelField="title" typicalItem="{ddlVariant.selectedItem}"
							visible="{(data.variantCount != 1) &amp;&amp; !data.isDownloading &amp;&amp; !data.isSelectedToDownload}" 
							includeInLayout="{(data.variantCount != 1) &amp;&amp; !data.isDownloading &amp;&amp; !data.isSelectedToDownload}"
							requireSelection="true" color="0x000" change="onVariantChange(event)"
							selectedIndex="{data.selectedVariantIndex}"/-->
			<s:Image id="imgDownloaded"
					 width="50"
					 source="@Embed('/helperResources/images/icoTickLabel.png')"
					 includeInLayout="{data.isAlreadyDownloaded}" visible="{data.isAlreadyDownloaded}"
					 toolTip="{'Installed: '+ data.createdOn.toLocaleString()}"/>
			<s:Image id="imgVersionNote"
					 buttonMode="true"
					 source="@Embed('/helperResources/images/icoNote.png')"
					 includeInLayout="{data.oldInstalledVersion}" visible="{data.oldInstalledVersion}"
					 toolTip="Version Mismatch"/>
			<s:Image source="@Embed('/helperResources/images/icoNote.png')"
					 includeInLayout="{data.hasWarning}" visible="{data.hasWarning}"
					 toolTip="{data.hasWarning}"
					 width="50"/>
			<s:Image source="@Embed('/helperResources/images/icoErrorLabel.png')"
					 includeInLayout="{data.hasError}" visible="{data.hasError}"
					 toolTip="{data.hasError}"
					 width="50"/>
			<s:Image id="imgDownload"
					 width="50" buttonMode="true"
					 source="@Embed('/helperResources/images/icoDownloadLabel.png')"
					 includeInLayout="{data.isDownloadable &amp;&amp; !data.isAlreadyDownloaded &amp;&amp; 
					 !data.isDownloading &amp;&amp; !data.isDownloaded &amp;&amp; !data.isSelectedToDownload}" 
					 visible="{data.isDownloadable &amp;&amp; !data.isAlreadyDownloaded &amp;&amp; !data.isDownloading 
					 &amp;&amp; !data.isDownloaded &amp;&amp; !data.isSelectedToDownload}"
					 alpha="{imgDownload.enabled ? 1 : .8}"
					 enabled="{HelperConstants.IS_RUNNING_IN_MOON || (!HelperConstants.IS_RUNNING_IN_MOON &amp;&amp; HelperConstants.IS_INSTALLER_READY)}"
					 click="onDownloadRequest(event)"/>
			<s:Image id="imgReDownload"
					 buttonMode="true"
					 source="@Embed('/helperResources/images/icoReDownload.png')"
					 includeInLayout="false" visible="false"
					 alpha="{imgDownload.enabled ? 1 : .8}"
					 enabled="{HelperConstants.IS_RUNNING_IN_MOON || (!HelperConstants.IS_RUNNING_IN_MOON &amp;&amp; HelperConstants.IS_INSTALLER_READY)}"
					 click="onDownloadRequest(event)"/>
			<s:Image width="50"
					 source="@Embed('/helperResources/images/icoQueuedLabel.png')"
					 includeInLayout="{data.isSelectedToDownload &amp;&amp; !data.isDownloading}" visible="{data.isSelectedToDownload &amp;&amp; !data.isDownloading}"/>
			<s:Image source="@Embed('/helperResources/images/icoConfigure.png')"
					 includeInLayout="{!data.isAlreadyDownloaded &amp;&amp; HelperConstants.IS_RUNNING_IN_MOON}" 
					 visible="{!data.isAlreadyDownloaded &amp;&amp; HelperConstants.IS_RUNNING_IN_MOON}"
					 width="50"
					 buttonMode="true" click="onOpenMoonshineSettings(event)"/>
		</s:HGroup>
	</s:HGroup>
	
	<s:Image source="{HelperConstants.BG_LIST_DIVIDER}" width="100%" fillMode="repeat"
			 bottom="0"/>
</s:ItemRenderer>