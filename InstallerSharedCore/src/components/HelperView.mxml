<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 initialize="onInitialized(event)" creationComplete="onCreationCompletes(event)">
	<fx:Metadata>
		[Event(name="DOWNLOAD_COMPONENT", type="moonshine.events.HelperEvent")]
		[Event(name="OPEN_MOON_SETTINGS", type="moonshine.events.HelperEvent")]
		[Event(name="COMPONENT_DOWNLOADED", type="moonshine.events.HelperEvent")]
		[Event(name="OPEN_COMPONENT_LICENSE", type="moonshine.events.HelperEvent")]
		[Event(name="ALL_COMPONENTS_TESTED", type="moonshine.events.HelperEvent")]
		[Event(name="DOWNLOAD_VARIANT_CHANGED", type="moonshine.events.HelperEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import actionScripts.interfaces.IHelperMoonshineBridge;
			import actionScripts.locator.HelperModel;
			import actionScripts.managers.InstallerItemsManager;
			import actionScripts.managers.StartupHelper;
			import actionScripts.utils.EnvironmentUtils;
			import moonshine.haxeScripts.valueObjects.ComponentVO;
			import actionScripts.valueObjects.HelperConstants;
			
			import components.renderers.ComponentRenderer;
			import components.renderers.PackageRenderer;
			
			import feathers.data.ArrayCollection;
			
			import moonshine.events.HelperEvent;
			
			//--------------------------------------------------------------------------
			//
			//  PUBLIC VARIABLES
			//
			//--------------------------------------------------------------------------
			
			public var dependencyCheckUtil:IHelperMoonshineBridge;
			public var environmentUtil:EnvironmentUtils;
			public var isRunningInsideMoonshine:Boolean;
			
			public function get isConfigurationLoaded():Boolean
			{
				return (model.components != null);
			}
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE VARIABLES
			//
			//--------------------------------------------------------------------------
			
			[Bindable] private var packageList:mx.collections.ArrayCollection;
			
			private var model:HelperModel = HelperModel.getInstance();
			private var itemsManager:InstallerItemsManager = InstallerItemsManager.getInstance();
			
			//--------------------------------------------------------------------------
			//
			//  PUBLIC API
			//
			//--------------------------------------------------------------------------
			
			public function updateComponentStatusAsDownloaded(id:String, path:String=null):void
			{
				for each (var item:ComponentVO in model.components.array)
				{
					if (item.id == id)
					{
						item.isAlreadyDownloaded = true;
						if (path) item.installToPath = path;
						this.dispatchEvent(new HelperEvent(HelperEvent.COMPONENT_DOWNLOADED, item));
						break;
					}
				}
			}
			
			public function checkForUpdate():void
			{
				if (model.components && !HelperConstants.IS_DETECTION_IN_PROCESS) 
				{
					itemsManager.environmentUtil = environmentUtil;
					itemsManager.detectOnly();
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  PROTECTED API
			//
			//--------------------------------------------------------------------------
			
			protected function onInitialized(event:FlexEvent):void
			{
				HelperConstants.IS_RUNNING_IN_MOON = isRunningInsideMoonshine;
			}
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				if (!HelperConstants.IS_RUNNING_IN_MOON) rgType.selectedIndex = 1;
				
				if (!model.components)
				{
					itemsManager.dependencyCheckUtil = dependencyCheckUtil;
					itemsManager.environmentUtil = environmentUtil;
					itemsManager.addEventListener(HelperEvent.COMPONENT_DOWNLOADED, onComponentDetected, false, 0, true);
					itemsManager.addEventListener(HelperEvent.ALL_COMPONENTS_TESTED, onAllComponentsDetected, false, 0, true);
					itemsManager.addEventListener(StartupHelper.EVENT_CONFIG_LOADED, onConfigLoaded);
					itemsManager.loadItemsAndDetect();
				}
				else
				{
					onConfigLoaded(null);
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE API
			//
			//--------------------------------------------------------------------------
			
			private function filterSearch(filter:Boolean=true):void
			{
				if (!filter)
				{
					//model.packages.filterFunction = null;
					model.components.filterFunction = null;
					//model.packages.refresh();
					model.components.refresh();
					return;
				}
				
				if (rgType.selectedValue == "feature")
				{
					/*model.packages.filterFunction = filterPackages;
					model.packages.refresh();*/
				}
				else
				{
					model.components.filterFunction = filterComponents;
					model.components.refresh();
				}
			}
			
			private function filterPackages(item:Object):Boolean
			{
				return !item.isIntegrated;
			}
			
			private function filterComponents(item:Object):Boolean
			{
				return !item.isAlreadyDownloaded;
			}
			
			//--------------------------------------------------------------------------
			//
			//  LISTENERS API
			//
			//--------------------------------------------------------------------------
			
			private function onConfigLoaded(event:HelperEvent):void
			{
				itemsManager.removeEventListener(StartupHelper.EVENT_CONFIG_LOADED, onConfigLoaded);
				onFilterTypeChanged(null);
				
				// pre-filter-out pre-installed items on SDK Installer view
				if (!isRunningInsideMoonshine)
				{
					model.packages.filterFunction = filterPackages;
					model.packages.refresh();
				}
			}
			
			private function onFilterTypeChanged(event:Event):void
			{
				if (rgType.selectedValue == "feature")
				{
					lstItems.itemRenderer = new ClassFactory(PackageRenderer);
					packageList = getTemporaryMXCollectionFromFeathers(model.packages);
				}
				else
				{
					lstItems.itemRenderer = new ClassFactory(ComponentRenderer);
					packageList = getTemporaryMXCollectionFromFeathers(model.components);
				}
				
				// update filter state
				onFilterChange(null);
			}
			
			private function getTemporaryMXCollectionFromFeathers(collection:feathers.data.ArrayCollection):mx.collections.ArrayCollection
			{
				var tmpCollection:mx.collections.ArrayCollection = new mx.collections.ArrayCollection();
				for each (var item:Object in collection.array)
				{
					tmpCollection.addItem(item);
				}
				return tmpCollection;
			}
			
			private function onFilterChange(event:Event):void
			{
				filterSearch(cbFilter.selected);
			}
			
			private function onComponentDetected(event:HelperEvent):void
			{
				dispatchEvent(event);
			}
			
			private function onAllComponentsDetected(event:HelperEvent):void
			{
				itemsManager.removeEventListener(HelperEvent.ALL_COMPONENTS_TESTED, onAllComponentsDetected);
				dispatchEvent(event);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="rgType" change="onFilterTypeChanged(event)"/>
	</fx:Declarations>
	
	<s:HGroup width="100%"
			  verticalAlign="middle">
		<s:CheckBox id="cbFilter" 
					label="Only show features that need setup"
					change="onFilterChange(event)"
					visible="{rgType.selectedValue == 'software'}"/>
		<s:Spacer width="100%"/>
		<s:RadioButton groupName="rgType" value="feature" label="By Feature"
					   selected="true"/>
		<s:RadioButton groupName="rgType" value="software" label="By Software"/>
	</s:HGroup>
	
	<s:List id="lstItems" 
			width="100%" height="100%"
			dataProvider="{packageList}"
			horizontalScrollPolicy="off" styleName="withBorderList"/>
</s:VGroup>