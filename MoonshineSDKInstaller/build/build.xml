<project name="MoonshineBuildScriptLibrary" basedir="." default="all" >
	<description>
		This is a library shared ANT tasks to be used for building ElCapitan Sandbox test project.
	</description>
 	
	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->

	<!-- Read local properties -->
	<property file="local.properties"/>

	<!-- Read all environment properties -->
	<property environment="env"/>

	<tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
		<format property="timestamp.time" pattern="MM/dd/yyyy hh:mm aa"/>
	</tstamp>

	<!-- ANCHOR - Tools -->	
	<property name="JAVA_HOME" value="${env.JAVA_HOME}"/>
	<property name="FLEX_HOME" value="${env.FLEX_HOME}"/>
    <property name="adt.cmd" value="${FLEX_HOME}/lib/adt.jar"/>
	<property name="haxelib.cmd" value="haxelib"/>
	<property name="signtool.cmd" value="signtool"/>
	<property name="nsis.cmd" value="makensis"/>
	<taskdef 
		resource="net/sf/antcontrib/antcontrib.properties" 
		classpath="./ant-contrib-0.6.jar"/>
	<taskdef 
		resource="flexTasks.tasks" 
		classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/>
	
	<property name="build.is.signed" value="false"/>
	<property name="build.is.development" value="true"/>

	<!-- ANCHOR - App Properties -->
	<if>
		<equals arg1="${build.is.development}" arg2="true"/>
		<then>
			<property name="app.id" value="net.prominic.MoonshineSDKInstaller-dev"/>
			<property name="app.title" value="Moonshine SDK Installer Development"/>
			<property name="app.name" value="MoonshineSDKInstallerDevelopment" />
		</then>
		<else>
			<property name="app.id" value="net.prominic.MoonshineSDKInstaller"/>
			<property name="app.title" value="Moonshine SDK Installer"/>
			<property name="app.name" value="MoonshineSDKInstaller" />
		</else>			
	</if>
	<property name="app.version" value="1.0.0"/>

	<!-- Detect Operating System -->
	<condition property="is.windows">
		<os family="windows"/>
	</condition>
	<condition property="is.macos">
		<os family="mac"/>
	</condition>
	<condition property="is.linux">
		<os family="unix"/>
	</condition>
	
	<!-- <if>
		<os family="unix"/>
		<then>
			<property name="desktopBinaryFilename" value="./bin/app/${app.name}.app"/>
			<copy file="entitlement.plist" todir="./bin" overwrite="true"/>
		</then>
		<else>
			<property name="desktopBinaryFilename" value="./bin/app/${app.name}.exe"/>
			<property name="windowsBundleFilename" value="./bin/app/${app.name}EXE" />
		</else>
	</if> -->
	
	<!-- <condition property="Is.Keychain.Certificate.Defined">
		<and>
			<not>
				<equals arg1="${certSignedMacOSKeychainapp.name}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainapp.name}" arg2="CERT_OSX_KEYCHAIN_INSTALLER"/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2="CERT_OSX_KEYCHAIN_PASS"/>
			</not>
		</and>
	</condition>
	<echo>Is.Keychain.Certificate.Defined: ${Is.Keychain.Certificate.Defined}</echo> -->
	
	<!--
	//==========================================================================
	//
	//  TASKS
	//
	//==========================================================================
	-->
	
	<!-- ANCHOR - All Tasks -->
	<target name="all">
		<switch value="true">
			<case value="${is.windows}">
				<antcall>
					<!-- Windows Tasks -->
					<target name="print-info"/>
					<target name="init"/>
					<target name="modify-app-descriptor"/>
					<target name="install-haxe-dependencies"/>
					<target name="compile-gui-core"/>
					<target name="compile-swf"/>
					<target name="compile-app"/>			
					<target name="create-windows-installer"/>
					<target name="sign-windows-installer"/>
				</antcall>
			</case>
			<case value="${is.macos}">
				<antcall>
					<!-- macOS Tasks -->
					<target name="print-info"/>
					<target name="init"/>
					<target name="modify-app-descriptor"/>
					<target name="install-haxe-dependencies"/>
					<target name="compile-gui-core"/>
					<target name="compile-swf"/>
					<target name="compile-app"/>			
				</antcall>
			</case>
			<case value="${is.linux}">
				<antcall>
					<!-- Linux Tasks -->
					<echo message="Linux not supported"/>
				</antcall>
			</case>
		</switch>

		
	</target>

	<!-- ANCHOR - Print Info -->
    <target name="print-info">
        <echo message="Build Properties:"/>
		<echo message="=========="/>
		<echo message="Is Development: ${build.is.development}"/>
		<echo message="Is Signed: ${build.is.signed}"/>
		<echo message="OS: ${os.name}"/>
		<echo message=""/>
		<echo message="App Properties:"/>
		<echo message="=========="/>
		<echo message="App Name: ${app.name}"/>
		<echo message="App Title: ${app.title}"/>
		<echo message="App ID: ${app.id}"/>
		<echo message="App Version: ${app.version}"/>
		<echo message=""/>
		<echo message="Tools:"/>
		<echo message="=========="/>
		<echo message="JAVA_HOME: ${JAVA_HOME}"/>
		<echo message="FLEX_HOME: ${FLEX_HOME}"/>
		<echo message="adt command: ${adt.cmd}"/>
		<echo message="haxelib command: ${haxelib.cmd}"/>
		<echo message="signtool command: ${signtool.cmd}"/>
		<echo message="nsis command: ${nsis.cmd}"/>
    </target>

	<!-- ANCHOR - Init -->
	<target name="init">
		<mkdir dir="./bin"/>
		<mkdir dir="./bin/app"/>

		<java jar="${adt.cmd}" fork="true" failonerror="true">
			<arg line="-certificate" />
			<arg line="-cn MoonshineSelfSignedCertificate" />
			<arg line="2048-RSA" />
	   		<arg line="./bin/MoonshineSelfSignedCertificate.p12" />
	   		<arg line="moonshine"/>
		</java>
		<echo message="Created Self-Signed Certificate"/>
	</target>

	<!-- ANCHOR - Modify App Descriptor -->
	<target name="modify-app-descriptor">
		<copy file="../src/MoonshineSDKInstaller-app.xml" todir="./bin" overwrite="true"/>
		<copy todir="./installer" overwrite="true">
			<fileset dir="../src/installer"/>
		</copy>
		<copy todir="./images" overwrite="true">
			<fileset dir="../src/assets/images"/>
		</copy>
		<copy todir="./helperResources" overwrite="true">
			<fileset dir="../../InstallerSharedCore/src/helperResources"/>
		</copy>
		<copy todir="./shellScripts" overwrite="true">
			<fileset dir="../src/shellScripts"/>
		</copy>
		
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="filenameToBeReplacedByANT" 
			replace="${app.name}" />
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="nameToBeReplacedByANT" 
			replace="${app.title} ${app.version}" 
			encoding="utf-8" />
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="idToBeReplacedByANT" 
			replace="${app.id}" />
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="0.0.0" 
			replace="${app.version}" />
		<replace 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			token="[This value will be overwritten by Flash Builder in the output app.xml]" 
			value="./bin/MoonshineSDKInstaller.swf" />
		<echo message="Modified App Descriptor"/>
	</target>
	
	<!-- ANCHOR - Install Haxe Dependencies -->
	<target name="install-haxe-dependencies">
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="feathersui"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="openfl"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="actuate"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="lime"/>
			<arg value="--quiet"/>
		</exec>
		<echo message="Installed Haxe Dependencies"/>
		<echo message=""/>
		<echo message="All Installed Haxelib Libraries:"/>
		<echo message="=========="/>
		<exec executable="${haxelib.cmd}">
			<arg value="list"/>
		</exec>
		
	</target>

	<!-- ANCHOR - Compile GUI Core -->
	<target name="compile-gui-core">
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="run"/>
			<arg value="openfl"/>
			<arg value="build"/>
			<arg value="flash"/>
		</exec>
		<echo message="Compiled GUI Core"/>
	</target>

	<!-- ANCHOR - Compile SWF -->
	<target name="compile-swf">
		<mxmlc file="../src/MoonshineSDKInstaller.mxml" 
			   output="./bin/MoonshineSDKInstaller.swf" 
			   swf-version="41" 
			   configname="air" 
			   fork="true" 
			   optimize="true" 
			   debug="false" 
			   actionscript-file-encoding="UTF-8" 
			   incremental="false"
			   keep-generated-actionscript="false"
			   allow-source-path-overlap="true">
			<load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>
			<source-path path-element="../src"/>
			<source-path path-element="../../flex-utilities/flex-installer/common/src"/>
			<source-path path-element="../../flex-utilities/flex-installer/ant_on_air/external"/>
			<source-path path-element="../../flex-utilities/flex-installer/ant_on_air/src"/>
			<source-path path-element="../../flex-utilities/flex-installer/ant_on_air/locale/{locale}"/>
			<source-path path-element="../../ApacheFlexSDKInstallerLib/src"/>
			<source-path path-element="../../InstallerSharedCore/src"/>
			<compiler.library-path dir="../../ApacheFlexSDKInstallerLib/libs" append="true">
				<include name="*.swc" />
			</compiler.library-path>
			<library-path dir="./bin" includes="*.swc" append="true" />
			<compiler.library-path dir="../../MoonshineSDKInstallerGUICore/bin/flash/bin" append="true">
				<include name="*.swc" />
			</compiler.library-path>
		</mxmlc>
		<echo message="Compiled SWF"/>
	</target>

	<!-- ANCHOR - Compile App -->
	<target name="compile-app">
		<java jar="${adt.cmd}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore ./bin/MoonshineSelfSignedCertificate.p12" />
			<arg line="-storepass moonshine" />
			<arg line="-tsa 'http://timestamp.digicert.com'" />
	   		<arg line="-target bundle"/>
	   		<arg line="./bin/app/" />
	   		<arg line="./bin/MoonshineSDKInstaller-app.xml" />
	   		<arg line="./bin/MoonshineSDKInstaller.swf" />
			<arg line="./installer"/>
			<arg line="./images"/>
			<arg line="./helperResources"/>
			<arg line="./shellScripts"/>
	   		<!-- Add folders to be bundled in the AIR file here -->
		</java>
		<echo message="Compiled App"/>
	 </target>
	
	<!--
	//==========================================================================
	//
	//  WINDOWS
	//
	//==========================================================================
	-->

	<!-- ANCHOR - Create Windows Installer -->
	<target name="create-windows-installer">
		<exec executable="${nsis.cmd}" failonerror="true">
			<arg value="/DVERSION=${app.version}"/>
			<arg value="/DINSTALLERNAME=${app.name}"/>
			<arg value="/DEXECUTABLENAME=${app.name}"/>
			<arg value="/DAPPID=${app.id}"/>
			<arg value="/DTIMESTAMP=${timestamp.time}"/>
			<arg value="./nsis-build.nsi"/>
		</exec>
		<echo message="Created Windows Installer"/>
	</target>
		
	<!-- ANCHOR - Sign Windows Installer -->
	<target name="sign-windows-installer" if="${build.is.signed}">
		<exec executable="${signtool.cmd}" failonerror="true">
			<arg value="sign"/>
			<arg value="/sha1"/>
			<arg value="${env.SM_THUMBPRINT}"/>
			<arg value="/tr"/>
			<arg value="http://timestamp.digicert.com"/>
			<arg value="/td"/>
			<arg value="SHA256"/>
			<arg value="/fd"/>
			<arg value="SHA256"/>
			<arg value="./bin/${app.name}-${app.version}.exe"/>
		</exec>
		<echo message="Signed Windows Installer"/>
	 </target>	
	
	<!--
	//==========================================================================
	//
	//  MACOS
	//
	//==========================================================================
	-->
	
	<!-- Compile .pkg to distribute through app store -->
	<target name="buildAppStorePKG" if="${Is.Keychain.Certificate.Defined}">
		<copy tofile="${desktopBinaryFilename}/Contents/Resources/Icon.icns" file="${basedir}/images/moonshineASHIcons.icns" overwrite="true"/>
		<replace file="${desktopBinaryFilename}/Contents/Info.plist">
				<replacetoken><![CDATA[<string>Icon.icns</string>]]></replacetoken>
				<replacevalue><![CDATA[<string>Icon.icns</string>
		<key>ITSAppUsesNonExemptEncryption</key><false/>
		<key>CFBundleName</key>
		<string>Moonshine SDK Installer</string>
		<key>LSApplicationCategoryType</key>
		<string>public.app-category.developer-tools</string>
		<key>CFBundleVersion</key>
		<string>1.0</string>
		<key>postinstall_script</key>
		<string>#!/bin/sh
			open -a /Applications/Moonshine\ SDK\ Installer.app/
			exit 0</string>]]></replacevalue>
		</replace>
		<if>
			<equals arg1="${build.is.development}" arg2="true"/>
			<then>
				<replaceregexp file="${desktopBinaryFilename}/Contents/Info.plist" match="macapp-identifier" replace="net.prominic.MoonshineSDKInstaller-dev" flags="g"/>
			</then>
			<else>
				<replaceregexp file="${desktopBinaryFilename}/Contents/Info.plist" match="macapp-identifier" replace="net.prominic.MoonshineSDKInstaller" flags="g"/>
			</else>			
		</if>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='security unlock-keychain -p "${certSignedMacOSKeychainPass}"'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/WebKit.dylib"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="chmod -R 777 ${desktopBinaryFilename}"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/Flash\ Player.plugin/Contents/Info.plist"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Adobe\ AIR_64\ Helper"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/ExtendedAppEntryTemplate64"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/A2712Enabler'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --timestamp -v -s "${certSignedDevIDKeychainName}" ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/Flash\ Player.plugin/Contents/MacOS/FlashPlayer-10.6'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --timestamp -v -s "${certSignedDevIDKeychainName}" ${desktopBinaryFilename}/Contents/Resources/META-INF/AIR/extensions/karar.santanu.SecurityScopeBookmark/META-INF/ANE/MacOS-x86-64/SecurityScopeBookmark.framework/Versions/A/SecurityScopeBookmark'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --timestamp -v -s "${certSignedDevIDKeychainName}" ${desktopBinaryFilename}/Contents/Resources/META-INF/AIR/extensions/karar.santanu.SecurityScopeBookmark/META-INF/ANE/MacOS-x86-64/SecurityScopeBookmark.framework/Versions/A'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f -v -s "${certSignedDevIDKeychainName}" --deep ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --options runtime --timestamp -v -s "${certSignedDevIDKeychainName}" --entitlements ./bin/entitlement.plist ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Signing checks on Sandbox APP: spctl -vvv --assess --type exec ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='spctl -vvv --assess --type exec ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Hardened runtime checks on Sandbox APP: codesign --display --verbose ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign --display --verbose ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Timestamp check on Sandbox APP: codesign -dvv ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -dvv ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productbuild --component ${desktopBinaryFilename} /Applications "./bin/app/${app.title}.pkg" --sign "Developer ID Installer: Prominic.NET, Inc."'/>
		</exec>
		<echo>========== Installer check on Sandbox PKG: pkgutil --check-signature ./bin/app/${app.title}_Signed_NonSandbox.pkg</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='pkgutil --check-signature "./bin/app/${app.title}.pkg"'/>
		</exec>
		

		<!-- @devsena: Avail non-sandbox entitlement to be use in upcoming process -->
		<copy file="entitlement-non-sandbox.plist" tofile="./bin/entitlement.plist" overwrite="true"/>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --options runtime --timestamp -v -s "${certSignedDevIDKeychainName}" --entitlements ./bin/entitlement.plist ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Signing checks on Non-Sandbox APP: spctl -vvv --assess --type exec ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='spctl -vvv --assess --type exec ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Hardened runtime checks: codesign --display --verbose ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign --display --verbose ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Timestamp check: codesign -dvv ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -dvv ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productbuild --component ${desktopBinaryFilename} /Applications "./bin/app/${app.title}_DONOTUSE.pkg" --sign "Developer ID Installer: Prominic.NET, Inc."'/>
		</exec>
		<!-- @devsena; Following part not suppose to go to source distribution. Referring the certificate as "${certSignedDevIDKeychainName}" always fails by unknown reason but if static name referencing  !-->
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productsign --sign "Developer ID Installer: Prominic.NET, Inc." "./bin/app/${app.title}_DONOTUSE.pkg" "./bin/app/${app.title}_Signed_NonSandbox.pkg"'/>
		</exec>
		<echo>========== Installer check on Non-Sandbox PKG: pkgutil --check-signature ./bin/app/${app.title}_Signed_NonSandbox.pkg</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='pkgutil --check-signature "./bin/app/${app.title}_Signed_NonSandbox.pkg"'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='rm "./bin/app/${app.title}_DONOTUSE.pkg"'/>
		</exec>
	</target>
	
	<!--
	//==========================================================================
	//
	//  GLOBAL
	//
	//==========================================================================
	-->
	
	<!-- ANCHOR - Clean -->
	<target name="clean">
		<delete dir="./bin"/>
		<delete dir="installer"/>
		<delete dir="images"/>
		<delete dir="helperResources"/>
		<delete dir="shellScripts"/>
	</target>
</project>