<project name="MoonshineBuildScriptLibrary" basedir="." default="build" >
	<description>
		This is a library shared ANT tasks to be used for building ElCapitan Sandbox test project.
	</description>
 	
	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->

	<!-- Read local properties -->
	<property file="local.properties"/>

	<!-- Read all environment properties -->
	<property environment="env"/>

	<tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
		<format property="timestamp.time" pattern="MM/dd/yyyy hh:mm aa"/>
	</tstamp>

	<!-- ANCHOR - Tool Properties -->	
	<property name="JAVA_HOME" value="${env.JAVA_HOME}"/>
	<property name="FLEX_HOME" value="${env.FLEX_HOME}"/>
    <property name="adt.cmd" value="${FLEX_HOME}/lib/adt.jar"/>
	<property name="haxelib.cmd" value="haxelib"/>
	<property name="signtool.cmd" value="signtool"/>
	<property name="nsis.cmd" value="makensis"/>
	<taskdef 
		resource="net/sf/antcontrib/antcontrib.properties" 
		classpath="./ant-contrib-0.6.jar"/>
	<taskdef 
		resource="flexTasks.tasks" 
		classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/>
	
	<property name="build.is.development" value="true"/>

	<!-- ANCHOR - App Properties -->
	<if>
		<equals arg1="${build.is.development}" arg2="true"/>
		<then>
			<property name="app.id" value="net.prominic.MoonshineSDKInstaller-dev"/>
			<property name="app.title" value="Moonshine SDK Installer Development"/>
			<property name="app.name" value="MoonshineSDKInstallerDevelopment" />
		</then>
		<else>
			<property name="app.id" value="net.prominic.MoonshineSDKInstaller"/>
			<property name="app.title" value="Moonshine SDK Installer"/>
			<property name="app.name" value="MoonshineSDKInstaller" />
		</else>			
	</if>
	<property name="app.version" value="1.0.0"/>

	<!-- Detect Operating System -->
	<condition property="is.windows">
		<os family="windows"/>
	</condition>
	<condition property="is.macos">
		<os family="mac"/>
	</condition>
	<condition property="is.linux">
		<and>
    		<os family="unix"/>
    		<not>
      			<os family="mac"/>
    		</not>
  		</and>
	</condition>
	
	<!--
	//==========================================================================
	//
	//  WORKFLOWS
	//
	//==========================================================================
	-->
	
	<!-- ANCHOR - Build Workflow -->
	<target name="build">
		<antcall>
			<target name="print-info"/>
			<target name="init"/>
			<target name="modify-app-descriptor"/>
			<target name="install-haxe-dependencies"/>
			<target name="compile-gui-core"/>
			<target name="compile-swf"/>
			<target name="compile-app"/>			
		</antcall>
	</target>

	<!-- ANCHOR - Pack Sign Workflow -->
	<target name="pack-sign">
		<switch value="true">
			<case value="${is.windows}">
				<antcall>
					<!-- Windows Tasks -->		
					<target name="create-windows-installer"/>
					<target name="sign-windows-installer"/>
				</antcall>
			</case>
			<case value="${is.macos}">
				<antcall>
					<!-- macOS Tasks -->
					<target name="sign-macos-app"/>
					<target name="create-macos-pkg"/>
					<target name="sign-macos-pkg"/>
					<target name="notarize-macos-pkg"/>
				</antcall>
			</case>
			<case value="${is.linux}">
					<!-- Linux Tasks -->
					<echo message="Linux not supported yet."/>
			</case>
		</switch>		
	</target>

	<!-- ANCHOR - Clean Workflow -->
	<target name="clean">
		<delete dir="./bin"/>
		<delete dir="installer"/>
		<delete dir="images"/>
		<delete dir="helperResources"/>
		<delete dir="shellScripts"/>
	</target>

	<!--
	//==========================================================================
	//
	//  COMMON SUBTASKS
	//
	//==========================================================================
	-->

	<!-- ANCHOR - Print Info -->
    <target name="print-info">
        <echo message="Build Properties:"/>
		<echo message="=========="/>
		<echo message="Is Development: ${build.is.development}"/>
		<echo message="OS: ${os.name}"/>
		<echo message=""/>
		<echo message="App Properties:"/>
		<echo message="=========="/>
		<echo message="App Name: ${app.name}"/>
		<echo message="App Title: ${app.title}"/>
		<echo message="App ID: ${app.id}"/>
		<echo message="App Version: ${app.version}"/>
		<echo message=""/>
		<echo message="Tools:"/>
		<echo message="=========="/>
		<echo message="JAVA_HOME: ${JAVA_HOME}"/>
		<echo message="FLEX_HOME: ${FLEX_HOME}"/>
		<echo message="adt command: ${adt.cmd}"/>
		<echo message="haxelib command: ${haxelib.cmd}"/>
		<echo message="signtool command: ${signtool.cmd}"/>
		<echo message="nsis command: ${nsis.cmd}"/>
    </target>

	<!-- ANCHOR - Init -->
	<target name="init">
		<mkdir dir="./bin"/>
		<mkdir dir="./bin/app"/>

		<java jar="${adt.cmd}" fork="true" failonerror="true">
			<arg line="-certificate" />
			<arg line="-cn MoonshineSelfSignedCertificate" />
			<arg line="2048-RSA" />
	   		<arg line="./bin/MoonshineSelfSignedCertificate.p12" />
	   		<arg line="moonshine"/>
		</java>
		<echo message="Created Self-Signed Certificate"/>
	</target>

	<!-- ANCHOR - Modify App Descriptor -->
	<target name="modify-app-descriptor">
		<copy file="../src/MoonshineSDKInstaller-app.xml" todir="./bin" overwrite="true"/>
		<copy todir="./installer" overwrite="true">
			<fileset dir="../src/installer"/>
		</copy>
		<copy todir="./images" overwrite="true">
			<fileset dir="../src/assets/images"/>
		</copy>
		<copy todir="./helperResources" overwrite="true">
			<fileset dir="../../InstallerSharedCore/src/helperResources"/>
		</copy>
		<copy todir="./shellScripts" overwrite="true">
			<fileset dir="../src/shellScripts"/>
		</copy>
		
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="filenameToBeReplacedByANT" 
			replace="${app.name}" />
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="nameToBeReplacedByANT" 
			replace="${app.title} ${app.version}" 
			encoding="utf-8" />
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="idToBeReplacedByANT" 
			replace="${app.id}" />
		<replaceregexp 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			match="0.0.0" 
			replace="${app.version}" />
		<replace 
			file="./bin/MoonshineSDKInstaller-app.xml" 
			token="[This value will be overwritten by Flash Builder in the output app.xml]" 
			value="./bin/MoonshineSDKInstaller.swf" />
		<echo message="Modified App Descriptor"/>
	</target>
	
	<!-- ANCHOR - Install Haxe Dependencies -->
	<target name="install-haxe-dependencies">
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="feathersui"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="openfl"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="actuate"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="install"/>
			<arg value="lime"/>
			<arg value="--quiet"/>
		</exec>
		<echo message="Installed Haxe Dependencies"/>
		<echo message=""/>
		<echo message="All Installed Haxelib Libraries:"/>
		<echo message="=========="/>
		<exec executable="${haxelib.cmd}">
			<arg value="list"/>
		</exec>
		
	</target>

	<!-- ANCHOR - Compile GUI Core -->
	<target name="compile-gui-core">
		<exec executable="${haxelib.cmd}"
			dir="../../MoonshineSDKInstallerGUICore"
			failonerror="true">
			<arg value="run"/>
			<arg value="openfl"/>
			<arg value="build"/>
			<arg value="flash"/>
		</exec>
		<echo message="Compiled GUI Core"/>
	</target>

	<!-- ANCHOR - Compile SWF -->
	<target name="compile-swf">
		<mxmlc file="../src/MoonshineSDKInstaller.mxml" 
			   output="./bin/MoonshineSDKInstaller.swf" 
			   swf-version="41" 
			   configname="air" 
			   fork="true" 
			   optimize="true" 
			   debug="false" 
			   actionscript-file-encoding="UTF-8" 
			   incremental="false"
			   keep-generated-actionscript="false"
			   allow-source-path-overlap="true">
			<load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>
			<source-path path-element="../src"/>
			<source-path path-element="../../flex-utilities/flex-installer/common/src"/>
			<source-path path-element="../../flex-utilities/flex-installer/ant_on_air/external"/>
			<source-path path-element="../../flex-utilities/flex-installer/ant_on_air/src"/>
			<source-path path-element="../../flex-utilities/flex-installer/ant_on_air/locale/{locale}"/>
			<source-path path-element="../../ApacheFlexSDKInstallerLib/src"/>
			<source-path path-element="../../InstallerSharedCore/src"/>
			<compiler.library-path dir="../../ApacheFlexSDKInstallerLib/libs" append="true">
				<include name="*.swc" />
			</compiler.library-path>
			<library-path dir="./bin" includes="*.swc" append="true" />
			<compiler.library-path dir="../../MoonshineSDKInstallerGUICore/bin/flash/bin" append="true">
				<include name="*.swc" />
			</compiler.library-path>
		</mxmlc>
		<echo message="Compiled SWF"/>
	</target>

	<!-- ANCHOR - Compile App -->
	<target name="compile-app">
		<switch value="true">
			<case value="${is.windows}">
				<property name="app.path" value="bin/app"/>
			</case>
			<case value="${is.macos}">
				<property name="app.path" value="bin/app/${app.name}.app"/>
			</case>
		</switch>

		<java jar="${adt.cmd}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore ./bin/MoonshineSelfSignedCertificate.p12" />
			<arg line="-storepass moonshine" />
			<arg line="-tsa 'http://timestamp.digicert.com'" />
	   		<arg line="-target bundle"/>
	   		<arg line="${app.path}" />
	   		<arg line="bin/MoonshineSDKInstaller-app.xml" />
	   		<arg line="./bin/MoonshineSDKInstaller.swf" />
			<arg line="./installer"/>
			<arg line="./images"/>
			<arg line="./helperResources"/>
			<arg line="./shellScripts"/>
	   		<!-- Add folders to be bundled in the AIR file here -->
		</java>
		<echo message="Compiled App"/>
	 </target>
	
	<!--
	//==========================================================================
	//
	//  WINDOWS SUBTASKS
	//
	//==========================================================================
	-->

	<!-- ANCHOR - Create Windows Installer -->
	<target name="create-windows-installer">
		<exec executable="${nsis.cmd}" failonerror="true">
			<arg value="/DVERSION=${app.version}"/>
			<arg value="/DINSTALLERNAME=${app.name}"/>
			<arg value="/DEXECUTABLENAME=${app.name}"/>
			<arg value="/DAPPID=${app.id}"/>
			<arg value="/DTIMESTAMP=${timestamp.time}"/>
			<arg value="./nsis-build.nsi"/>
		</exec>
		<echo message="Created Windows Installer"/>
	</target>
		
	<!-- ANCHOR - Sign Windows Installer -->
	<target name="sign-windows-installer">
		<exec executable="${signtool.cmd}" failonerror="true">
			<arg value="sign"/>
			<arg value="/sha1"/>
			<arg value="${env.SM_THUMBPRINT}"/>
			<arg value="/tr"/>
			<arg value="http://timestamp.digicert.com"/>
			<arg value="/td"/>
			<arg value="SHA256"/>
			<arg value="/fd"/>
			<arg value="SHA256"/>
			<arg value="./bin/${app.name}-${app.version}.exe"/>
		</exec>
		<echo message="Signed Windows Installer"/>
	 </target>	
	
	<!--
	//==========================================================================
	//
	//  MACOS SUBTASKS
	//
	//==========================================================================
	-->

	<!-- ANCHOR - Sign macOS app -->
	<target name="sign-macos-app">
		<!-- Show Nuber of Developer ID Application Certificates -->
		<exec executable="bash" outputproperty="certs.application.in.keychain">
            <arg value="-c"/>
            <arg value="security find-certificate -a | grep -s 'Developer ID Application' | grep -c 'alis'"/>
        </exec>
		<!-- Show Number of Developer ID Installer Certificates -->
		<echo message="certs.application.in.keychain: ${certs.application.in.keychain}"/>
		<exec executable="bash" outputproperty="certs.installer.in.keychain">
            <arg value="-c"/>
            <arg value="security find-certificate -a | grep -s 'Developer ID Installer' | grep -c 'alis'"/>
        </exec>
		<echo message="certs.installer.in.keychain: ${certs.installer.in.keychain}"/>

		<exec executable="codesign" failonerror="true">
            <arg value="./bin/app/${app.name}.app"/>
            <arg value="--sign"/>
            <arg value="Developer ID Application"/>
			<arg value="--entitlements"/>
			<arg value="entitlement-non-sandbox.plist"/>
            <arg value="--options"/>
            <arg value="runtime"/>
            <arg value="--force"/>
            <arg value="--timestamp"/>
            <arg value="--verbose"/>
            <arg value="--deep"/>
        </exec>  

		<exec executable="codesign" failonerror="true">
			<arg value="-vvv"/>
			<arg value="--deep"/>
			<arg value="--strict"/>
            <arg value="./bin/app/${app.name}.app"/>
        </exec>

		<exec executable="spctl" failonerror="true">
			<arg value="-vvv"/>
			<arg value="--assess"/>
			<arg value="--type"/>
			<arg value="exec"/>
            <arg value="./bin/app/${app.name}.app"/>
        </exec>
	</target>

	<!-- ANCHOR - Create macOS pkg -->
	<target name="create-macos-pkg">
		<exec executable="productbuild" failonerror="true">
			<arg value="--component"/>
			<arg value="bin/app/${app.name}.app"/>			
			<arg value="/Applications"/>
			<arg value="./bin/msdki-unsigned.pkg"/>
		</exec>
		<echo message="Created macOS pkg"/>
	</target>

	<!-- ANCHOR - Sign macOS pkg -->
	<target name="sign-macos-pkg">
		<exec executable="productsign" failonerror="true">
			<arg value="--sign"/>
			<arg value="Developer ID Installer"/>
			<arg value="./bin/msdki-unsigned.pkg"/>
			<arg value="./bin/msdki.pkg"/>
		</exec>
		<echo message="Signed macOS pkg"/>
	</target>

	<!-- ANCHOR - Notarize macOS pkg -->
	<target name="notarize-macos-pkg">
		<exec executable="xcrun" failonerror="true">
			<arg value="notarytool"/>
			<arg value="submit"/>
			<arg value="./bin/msdki.pkg"/>
			<arg value="--keychain-profile"/>
			<arg value="${notarytool.profile}"/>
			<arg value="--wait"/>
		</exec>
		<echo message="Notarized macOS pkg"/>
	</target>

</project>