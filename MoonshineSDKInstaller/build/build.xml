<project name="MoonshineBuildScriptLibrary" basedir="." default="checkOS" >
	<description>
		This is a library shared ANT tasks to be used for building ElCapitan Sandbox test project.
	</description>
 	
	<tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd_HH-mm-ss" />
	</tstamp>
	
	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->
	
	<!-- Unchanging the following value will make script build 'locally'. 
		 Updating this by command-line injection will act script to build at Bamboo.
		 Expected value for command-line injection are 'true' or 'false' -->
	<property name="HELPER_IS_DESKTOP" value="HELPER_IS_DESKTOP"/>
	
	<!-- Compilers and Flex SDK configuration -->
	<xmlproperty file="ApplicationProperties.xml" keeproot="false" semanticattributes="true" prefix="APP_PROPERTIES"/>
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="ant-contrib-0.6.jar"/>
	<property name="keepDebugFiles" value="${APP_PROPERTIES.keepDebugFiles}" />
	<property name="deploy_dir" value="DEPLOY"/>
	<property name="debug_dir" value="bin-debug"/>
	
	<!-- Determining the run at local system or cloud -->
	<property name="localOrCloud" value="${svn.revision}"/>
	<if>
		<equals arg1="${localOrCloud}" arg2="&#36;&#123;svn.revision}"/>
		<then>
			<property name="HELPER_IS_DESKTOP" value="HELPER_IS_DESKTOP"/>
		</then>
		<else>
			<property name="HELPER_IS_DESKTOP" value="${HELPER_IS_DESKTOP}"/>
		</else>
	</if>
	
	<if>
		<!-- This expected value means its not running on Bamboo -->
		<equals arg1="${HELPER_IS_DESKTOP}" arg2="HELPER_IS_DESKTOP"/>
		<then>
			<echo>Reading properties from local ApplicationProperties</echo>
			<property name="IsDesktopBuild" value="${APP_PROPERTIES.isDesktop}"/>
			<property name="IsDevelopmentBuild" value="${APP_PROPERTIES.isDevelopmentVersion}"/>
			<property name="BuildVersion" value="${APP_PROPERTIES.buildVersion}"/>
			<property name="Is.Signed.Build" value="${APP_PROPERTIES.isSignedBuild}"/>
			<property name="certSignedAIR" value="${APP_PROPERTIES.certSignedAIR}" />
			<property name="certSignedAIRPassword" value="${APP_PROPERTIES.certSignedAIRPass}" />
			<property name="certSignedWindowsBinary" value="${APP_PROPERTIES.certSignedWindowsBinary}" />
			<property name="certSignedWindowsBinaryPassword" value="${APP_PROPERTIES.certSignedWindowsBinaryPass}" />
			<property name="certSignedDevIDKeychainName" value="${APP_PROPERTIES.certSignedDevIDKeychainName}" />
			<property name="certSignedMacOSKeychainName" value="${APP_PROPERTIES.certSignedMacOSKeychainName}" />
			<property name="certSignedMacOSKeychainInstallerName" value="${APP_PROPERTIES.certSignedMacOSKeychainInstallerName}" />
			<property name="certSignedMacOSKeychainPass" value="${APP_PROPERTIES.certSignedMacOSKeychainPass}" />
			<property name="svn.revision" value="3913"/>
			<condition property="HAXE_LIB_DIRECTORY" value="${APP_PROPERTIES.haxeLibDirectory}">
				<isset property="APP_PROPERTIES.haxeLibDirectory"/>
			</condition>
			<!-- fall back to default Haxe install location, if available -->
			<condition property="HAXE_LIB_DIRECTORY" value="c:/HaxeToolkit/haxe/haxelib.exe">
				<and>
					<os family="windows" />
					<available file="c:/HaxeToolkit/haxe" />
				</and>
			</condition>
			<condition property="HAXE_LIB_DIRECTORY" value="/usr/local/lib/haxe">
				<and>
					<os family="mac" />
					<available file="/usr/local/lib/haxe/haxelib" />
				</and>
			</condition>
		</then>
		<else>
			<echo>Reading properties from Bamboo Variables</echo>
			<property name="IsDesktopBuild" value="${HELPER_IS_DESKTOP}"/>
			<property name="IsDevelopmentBuild" value="${HELPER_IS_DEVELOPMENT_VERSION}"/>
			<property name="BuildVersion" value="${HELPER_VERSION}"/>
			<property name="Is.Signed.Build" value="${IS_SIGNED_BUILD}"/>
			<property name="certSignedAIR" value="${CERT_WIN_AIR}" />
			<property name="certSignedAIRPassword" value="${CERT_WIN_AIR_PASS}" />
			<property name="certSignedWindowsBinary" value="${CERT_WIN_INSTALLER}" />
			<property name="certSignedWindowsBinaryPassword" value="${CERT_WIN_INSTALLER_PASS}" />
			<property name="certSignedDevIDKeychainName" value="${CERT_DEV_ID_KEYCHAIN}" />
			<property name="certSignedMacOSKeychainName" value="${CERT_OSX_KEYCHAIN}" />
			<property name="certSignedMacOSKeychainInstallerName" value="${CERT_OSX_KEYCHAIN_INSTALLER}" />
			<property name="certSignedMacOSKeychainPass" value="${CERT_OSX_KEYCHAIN_PASS}" />
			<property name="svn.revision" value="${svn.revision}" />
			<property name="HAXE_LIB_DIRECTORY" value="${HAXE_LIB}"/>
		</else>
	</if>
	
	<echo>OS BIT : ${os.arch}</echo>
	<if>
		<os family="windows"/>
		<then>
			<if>
				<os arch="x86"/>
				<then>
					<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.winSDKPath" silent="true" />
				</then>
				<else>
					<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.winSDKPath64" silent="true" />
				</else>
			</if>
		</then>
		<else>
			<propertycopy property="FLEX_HOME" from="APP_PROPERTIES.unixSDKPath" silent="true" />
		</else>
	</if>
	
	<condition property="Is.FLEX_HOME.Not.Exists" else="false">
		<or>
			<and>
				<equals arg1="${FLEX_HOME}" arg2=""/>
			</and>
			<not>
				<available file="${FLEX_HOME}"/>
			</not>
		</or>
	</condition>
	
	<!-- Read all environment properties -->
	<property environment="env"/>
	<!-- Check and set if Flex SDK already setup as environment variable -->
	<propertycopy property="FLEX_HOME" from="env.FLEX_HOME" silent="true" override="${Is.FLEX_HOME.Not.Exists}"/>
	<propertycopy property="SIGNTOOL_HOME" from="env.SIGNTOOL_HOME" silent="true"/>
	<propertycopy property="NSIS_HOME" from="env.NSIS_HOME" silent="true"/>
	<echo>SDK : ${FLEX_HOME}</echo>
	<echo>SIGNTOOL: ${SIGNTOOL_HOME}</echo>
	<echo>NSIS: ${NSIS_HOME}</echo>
	
    <!-- Path to your Flex SDK with AIR 3.1 overlaid -->
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar"/>
    <property name="mxmlc_path" value="${FLEX_HOME}/lib/mxmlc.jar" />
    <property name="adt_path" value="${FLEX_HOME}/lib/adt.jar" />
 
    <!-- Application configuration -->
    <property name="swfFilename" value="${debug_dir}/MoonshineSDKInstaller.swf" />
	<property name="applicationSourceDirectory" value="../src"/>
	<property name="LibraryHelperSharedCore" value="../../InstallerSharedCore"/>
	<property name="LibrarySDKInstallerHaxe" value="../../MoonshineSDKInstallerGUICore"/>
	<property name="desktopMainSource" value="${applicationSourceDirectory}/MoonshineSDKInstaller.mxml" />
	<property name="desktopApplicationDescriptor" value="${debug_dir}/MoonshineSDKInstaller-app.xml" />
	<property name="desktopApplicationDescriptorOriginal" value="${applicationSourceDirectory}/MoonshineSDKInstaller-app.xml" />
	<property name="apacheInstallerSourceDirectory" value="../../flex-utilities/flex-installer"/>
	<property name="mashLibrarySourceDirectory" value="../../ApacheFlexSDKInstallerLib"/>
	
	<!-- Desktop configuration -->
	<property name="certSelfSignedNameOnly" value="MoonshineSelfSignedCertificate" />
	<property name="certSelfSigned" value="MoonshineSelfSignedCertificate.p12" />
	<property name="certSelfSignedPassword" value="moonshine" />
	
	<condition property="Is.Keychain.Certificate.Defined">
		<and>
			<not>
				<equals arg1="${certSignedMacOSKeychainInstallerName}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainInstallerName}" arg2="CERT_OSX_KEYCHAIN_INSTALLER"/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2=""/>
			</not>
			<not>
				<equals arg1="${certSignedMacOSKeychainPass}" arg2="CERT_OSX_KEYCHAIN_PASS"/>
			</not>
		</and>
	</condition>
	<echo>Is.Keychain.Certificate.Defined: ${Is.Keychain.Certificate.Defined}</echo>
	
	<tstamp>
		<format property="timestamp.time" pattern="MM/dd/yyyy hh:mm aa"/>
	</tstamp>
	
	<!--
	//==========================================================================
	//
	//  TASKS
	//
	//==========================================================================
	-->
	
	<!-- OS Check and decision on opening Task -->
	<target name="checkOS">
		<if>
			<os family="windows"/>
			<then>
				<antcall target="disposeTempWindows"></antcall>
			</then>
		<elseif>
			<os family="unix"/>
			<then>
				<antcall target="disposeTempUNIX"></antcall>
			</then>
		</elseif>
		</if>
	</target>

	<!-- Create a certificate if it doesn't exist already -->
	<target name="createCertificate" unless="certSelfSigned.exists">
		<echo>Self-signed .p12 certificate generation</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-certificate" />
			<arg line="-cn '${certSelfSignedNameOnly}'" />
			<arg line="2048-RSA" />
	   		<arg line="${certSelfSigned}" />
	   		<arg line="${certSelfSignedPassword}"/>
		</java>
		<copy file="${certSelfSigned}" todir="${debug_dir}" overwrite="true"/>
	 </target>
	
	<target name="InstallHaxeDependencies">
		<echo>Installing Haxe Libraries</echo>
		<exec executable="${HAXE_LIB_DIRECTORY}/haxelib"
			dir="${LibrarySDKInstallerHaxe}"
			failonerror="true">
			<arg value="install"/>
			<arg value="feathersui"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${HAXE_LIB_DIRECTORY}/haxelib"
			dir="${LibrarySDKInstallerHaxe}"
			failonerror="true">
			<arg value="install"/>
			<arg value="openfl"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${HAXE_LIB_DIRECTORY}/haxelib"
			dir="${LibrarySDKInstallerHaxe}"
			failonerror="true">
			<arg value="install"/>
			<arg value="actuate"/>
			<arg value="--quiet"/>
		</exec>
		<exec executable="${HAXE_LIB_DIRECTORY}/haxelib"
			dir="${LibrarySDKInstallerHaxe}"
			failonerror="true">
			<arg value="install"/>
			<arg value="lime"/>
			<arg value="--quiet"/>
		</exec>
	</target>

	<target name="CompileGUICore" depends="InstallHaxeDependencies">
		<echo>Compiling GUI Core SWC</echo>
		<exec executable="${HAXE_LIB_DIRECTORY}/haxelib"
			dir="${LibrarySDKInstallerHaxe}"
			failonerror="true">
			<arg value="run"/>
			<arg value="openfl"/>
			<arg value="build"/>
			<arg value="flash"/>
		</exec>
	</target>
	
	<!--
	//==========================================================================
	//
	//  WINDOWS
	//
	//==========================================================================
	-->
	
	<!-- Windows signed packaging initiator -->
	<target name="signedSigningBuild" if="${Is.Signed.Build}">
		<antcall target="CompileSWFWindowsSignedPackage"></antcall>
	</target>

	<!-- Windows packaging/signing Task -->
	<target name="CompileSWFWindowsSignedPackage" depends="CompileSWF">
		<echo># Signed Process Running - Preparing Bundle</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${certSelfSigned}'" />
			<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line="-tsa 'http://timestamp.entrust.net/TSS/RFC3161sha2TS'" />
	   		<arg line="-target bundle"/>
			<!--arg line="-target native"/-->
	   		<arg line="${windowsBundleFilename}" />
	   		<arg line="'${desktopApplicationDescriptor}'" />
	   		<arg line="'${swfFilename}'" />
			<arg line="installer"/>
			<arg line="images"/>
			<arg line="helperResources"/>
			<arg line="shellScripts"/>
	   		<!-- Add folders to be bundled in the AIR file here -->
		</java>
		<echo># Signed Process Running - Signing Executable</echo>
		<exec executable="${SIGNTOOL_HOME}/signtool.exe" failonerror="true">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${debug_dir}/${certSelfSigned}"/>
			<arg value="/p"/>
			<arg value="${certSelfSignedPassword}"/>
			<arg value="${windowsBundleFilename}/${executableName}.exe"/>
		</exec>
		<echo># Signed Process Running - Praparing Installer</echo>
		<exec executable="${NSIS_HOME}/makensis.exe" failonerror="true">
			<arg value="/DVERSION=${BuildVersion}"/>
			<arg value="/DINSTALLERNAME=${installerName}"/>
			<arg value="/DEXECUTABLENAME=${executableName}"/>
			<arg value="/DAPPID=${applicationID}"/>
			<arg value="/DTIMESTAMP=${timestamp.time}"/>
			<arg value="nsis-build.nsi"/>
		</exec>
		<echo># Signed Process Running - Signing Installer</echo>
		<exec executable="${SIGNTOOL_HOME}/signtool.exe" failonerror="true">
			<arg value="sign"/>
			<arg value="/f"/>
			<arg value="${certSignedWindowsBinary}"/>
			<arg value="/p"/>
			<arg value="${certSignedWindowsBinaryPassword}"/>
			<arg value="${deploy_dir}/${installerName}-${BuildVersion}.exe"/>
		</exec>
		<!--antcall target="zipCaptiveBundle"></antcall-->
	 </target>
	
	<!-- Windows self-signed packaging initiator -->
	<target name="normalSigningBuild" unless="${Is.Signed.Build}">
		<antcall target="CompileSWFWindowsSelfSignedPackage"></antcall>
	</target>

	 <!-- Windows packaging/signing Task -->
	<target name="CompileSWFWindowsSelfSignedPackage" depends="CompileSWF">
		<echo>Self-signed Process Running</echo>
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${debug_dir}/${certSelfSigned}'" />
			<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line="-tsa 'http://timestamp.entrust.net/TSS/RFC3161sha2TS'" />
	   		<arg line="-target bundle"/>
	   		<arg line="${windowsBundleFilename}" />
	   		<arg line="'${desktopApplicationDescriptor}'" />
	   		<arg line="'${swfFilename}'" />
			<arg line="installer"/>
			<arg line="images"/>
			<arg line="helperResources"/>
			<arg line="shellScripts"/>
	   		<!-- Add folders to be bundled in the AIR file here -->
		</java>
		<antcall target="zipCaptiveBundle"></antcall>
	 </target>
	
	<target name="zipCaptiveBundle">
		<zip destfile="${desktopBinaryFilename}.zip" basedir="${desktopBinaryFilename}"/>
	</target>
	
	<!--
	//==========================================================================
	//
	//  MACOS
	//
	//==========================================================================
	-->
	
	<!-- Compile .app to next use in .pkg building -->
	<!--target name="compile app project" depends="compile dmg project"-->
	<target name="compile app project" depends="CompileSWF">
		<java jar="${adt_path}" fork="true" failonerror="true">
			<arg line="-package" />
			<arg line="-storetype pkcs12" />
			<arg line="-keystore '${debug_dir}/${certSelfSigned}'" />
			<arg line="-storepass '${certSelfSignedPassword}'" />
			<arg line=" -tsa 'http://timestamp.entrust.net/TSS/RFC3161sha2TS'" />
			<arg line="-target bundle"/>
			<arg line="'${desktopBinaryFilename}'" />
			<arg line="'${desktopApplicationDescriptor}'" />
			<arg line="'${swfFilename}'" />
			<arg line="installer"/>
			<arg line="images"/>
			<arg line="helperResources"/>
			<arg line="shellScripts"/>
			<!-- Add folders to be bundled in the AIR file here -->
		</java>
	</target>
	
	<!-- Compile .pkg to distribute through app store -->
	<target name="buildAppStorePKG" depends="compile app project" if="${Is.Keychain.Certificate.Defined}">
		<copy tofile="${desktopBinaryFilename}/Contents/Resources/Icon.icns" file="${basedir}/moonshineASHIcons.icns" overwrite="true"/>
		<replace file="${desktopBinaryFilename}/Contents/Info.plist">
				<replacetoken><![CDATA[<string>Icon.icns</string>]]></replacetoken>
				<replacevalue><![CDATA[<string>Icon.icns</string>
		<key>ITSAppUsesNonExemptEncryption</key><false/>
		<key>CFBundleName</key>
		<string>Moonshine SDK Installer</string>
		<key>LSApplicationCategoryType</key>
		<string>public.app-category.developer-tools</string>
		<key>CFBundleVersion</key>
		<string>1.0</string>
		<key>postinstall_script</key>
		<string>#!/bin/sh
			open -a /Applications/Moonshine\ SDK\ Installer.app/
			exit 0</string>]]></replacevalue>
		</replace>
		<if>
			<equals arg1="${IsDevelopmentBuild}" arg2="true"/>
			<then>
				<replaceregexp file="${desktopBinaryFilename}/Contents/Info.plist" match="macapp-identifier" replace="net.prominic.MoonshineSDKInstaller-dev" flags="g"/>
			</then>
			<else>
				<replaceregexp file="${desktopBinaryFilename}/Contents/Info.plist" match="macapp-identifier" replace="net.prominic.MoonshineSDKInstaller" flags="g"/>
			</else>			
		</if>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='security unlock-keychain -p "${certSignedMacOSKeychainPass}"'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/WebKit.dylib"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="chmod -R 777 ${desktopBinaryFilename}"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/Flash\ Player.plugin/Contents/Info.plist"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Adobe\ AIR_64\ Helper"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/ExtendedAppEntryTemplate64"/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='rm ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/A2712Enabler'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --timestamp -v -s "${certSignedDevIDKeychainName}" ${desktopBinaryFilename}/Contents/Frameworks/Adobe\ AIR.framework/Versions/1.0/Resources/Flash\ Player.plugin/Contents/MacOS/FlashPlayer-10.6'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --timestamp -v -s "${certSignedDevIDKeychainName}" ${desktopBinaryFilename}/Contents/Resources/META-INF/AIR/extensions/karar.santanu.SecurityScopeBookmark/META-INF/ANE/MacOS-x86-64/SecurityScopeBookmark.framework/Versions/A/SecurityScopeBookmark'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --timestamp -v -s "${certSignedDevIDKeychainName}" ${desktopBinaryFilename}/Contents/Resources/META-INF/AIR/extensions/karar.santanu.SecurityScopeBookmark/META-INF/ANE/MacOS-x86-64/SecurityScopeBookmark.framework/Versions/A'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f -v -s "${certSignedDevIDKeychainName}" --deep ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --options runtime --timestamp -v -s "${certSignedDevIDKeychainName}" --entitlements ${debug_dir}/entitlement.plist ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Signing checks on Sandbox APP: spctl -vvv --assess --type exec ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='spctl -vvv --assess --type exec ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Hardened runtime checks on Sandbox APP: codesign --display --verbose ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign --display --verbose ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Timestamp check on Sandbox APP: codesign -dvv ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -dvv ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productbuild --component ${desktopBinaryFilename} /Applications "${deploy_dir}/${applicationName}.pkg" --sign "Developer ID Installer: Prominic.NET, Inc."'/>
		</exec>
		<echo>========== Installer check on Sandbox PKG: pkgutil --check-signature ${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='pkgutil --check-signature "${deploy_dir}/${applicationName}.pkg"'/>
		</exec>
		

		<!-- @devsena: Avail non-sandbox entitlement to be use in upcoming process -->
		<copy file="entitlement-non-sandbox.plist" tofile="${debug_dir}/entitlement.plist" overwrite="true"/>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -f --options runtime --timestamp -v -s "${certSignedDevIDKeychainName}" --entitlements ${debug_dir}/entitlement.plist ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Signing checks on Non-Sandbox APP: spctl -vvv --assess --type exec ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='spctl -vvv --assess --type exec ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Hardened runtime checks: codesign --display --verbose ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign --display --verbose ${desktopBinaryFilename}'/>
		</exec>
		<echo>========== Timestamp check: codesign -dvv ${desktopBinaryFilename}</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='codesign -dvv ${desktopBinaryFilename}'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productbuild --component ${desktopBinaryFilename} /Applications "${deploy_dir}/${applicationName}_DONOTUSE.pkg" --sign "Developer ID Installer: Prominic.NET, Inc."'/>
		</exec>
		<!-- @devsena; Following part not suppose to go to source distribution. Referring the certificate as "${certSignedDevIDKeychainName}" always fails by unknown reason but if static name referencing  !-->
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='productsign --sign "Developer ID Installer: Prominic.NET, Inc." "${deploy_dir}/${applicationName}_DONOTUSE.pkg" "${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg"'/>
		</exec>
		<echo>========== Installer check on Non-Sandbox PKG: pkgutil --check-signature ${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value='pkgutil --check-signature "${deploy_dir}/${applicationName}_Signed_NonSandbox.pkg"'/>
		</exec>
		<exec executable="bash" failonerror="true">
			<arg value="-c"/>
			<arg value='rm "${deploy_dir}/${applicationName}_DONOTUSE.pkg"'/>
		</exec>
	</target>
	
	<!--
	//==========================================================================
	//
	//  GLOBAL
	//
	//==========================================================================
	-->
	
	<!-- delete and recreate the DEPLOY dir -->
	<target name="init">
		<delete dir="${deploy_dir}"/>
		<delete dir="${debug_dir}" />
		<mkdir dir="${deploy_dir}" />
		<mkdir dir="${debug_dir}" />
	</target>
	
	<!-- modify in the descriptor file -->
	<target name="modifyDescriptor" depends="init" if="${IsDesktopBuild}">
		<copy file="${desktopApplicationDescriptorOriginal}" todir="${debug_dir}" overwrite="true"/>
		<copy todir="${basedir}/installer" overwrite="true">
			<fileset dir="${applicationSourceDirectory}/installer"/>
		</copy>
		<copy todir="${basedir}/images" overwrite="true">
			<fileset dir="${applicationSourceDirectory}/assets/images"/>
		</copy>
		<copy todir="${basedir}/helperResources" overwrite="true">
			<fileset dir="${LibraryHelperSharedCore}/src/helperResources"/>
		</copy>
		<copy todir="${basedir}/shellScripts" overwrite="true">
			<fileset dir="${applicationSourceDirectory}/shellScripts"/>
		</copy>
		
		<!-- modify field values based upon isDevelopment tag -->
		<if>
			<equals arg1="${IsDevelopmentBuild}" arg2="true"/>
			<then>
				<property name="applicationID" value="net.prominic.MoonshineSDKInstaller-dev"/>
				<property name="applicationName" value="Moonshine SDK Installer Development"/>
				<property name="executableName" value="MoonshineSDKInstallerDevelopment" />
				<property name="installerName" value="MoonshineSDKInstallerDevelopment" />
			</then>
			<else>
				<property name="applicationID" value="net.prominic.MoonshineSDKInstaller"/>
				<property name="applicationName" value="Moonshine SDK Installer"/>
				<property name="executableName" value="Moonshine SDK Installer" />
				<property name="installerName" value="MoonshineSDKInstaller" />
			</else>			
		</if>
		
		<if>
			<os family="unix"/>
			<then>
				<property name="desktopBinaryFilename" value="${deploy_dir}/${installerName}.app"/>
				<copy file="entitlement.plist" todir="${debug_dir}" overwrite="true"/>
			</then>
			<else>
				<property name="desktopBinaryFilename" value="${deploy_dir}/${installerName}.exe"/>
				<property name="windowsBundleFilename" value="${deploy_dir}/${installerName}EXE" />
				<if>
					<equals arg1="${Is.Signed.Build}" arg2="true"/>
					<then>
						<copy file="${certSignedWindowsBinary}" todir="${debug_dir}" overwrite="true"/>
						 <script language="javascript">
						  	arr = project.getProperty('certSignedWindowsBinary').split('/');
						  	project.setProperty('certSignedWindowsBinary', project.getProperty('debug_dir') + '/' + arr[arr.length - 1]);
						 </script>
					</then>
				</if>
			</else>
		</if>

		<copy file="${certSelfSigned}" todir="${debug_dir}" overwrite="true"/>
		
		<replaceregexp file="${desktopApplicationDescriptor}" match="filenameToBeReplacedByANT" replace="${executableName}" />
		<replaceregexp file="${desktopApplicationDescriptor}" match="nameToBeReplacedByANT" replace="${applicationName} ${BuildVersion}" encoding="utf-8" />
		<replaceregexp file="${desktopApplicationDescriptor}" match="idToBeReplacedByANT" replace="${applicationID}" />
		<replaceregexp file="${desktopApplicationDescriptor}" match="0.0.0" replace="${BuildVersion}" />
		<replace file="${desktopApplicationDescriptor}" token="[This value will be overwritten by Flash Builder in the output app.xml]" value="${swfFilename}" />
	</target>
	
	<target name="createBuildInfoFile" depends="modifyDescriptor">
		<echo file="${basedir}/images/appProperties.txt" append="false">${svn.revision}</echo>
	</target>
	
	<!-- Compile SWF to build directory for desktop packaging -->
	<target name="CompileSWF" depends="createBuildInfoFile, CompileGUICore">
		<echo>${swfFilename}</echo>
		<mxmlc file="${desktopMainSource}" 
			   output="${swfFilename}" 
			   swf-version="41" 
			   configname="air" 
			   fork="true" 
			   optimize="true" 
			   debug="false" 
			   actionscript-file-encoding="UTF-8" 
			   incremental="false"
			   keep-generated-actionscript="false"
			   allow-source-path-overlap="true">
			<load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>
			<source-path path-element="${applicationSourceDirectory}"/>
			<source-path path-element="${apacheInstallerSourceDirectory}/common/src"/>
			<source-path path-element="${apacheInstallerSourceDirectory}/ant_on_air/external"/>
			<source-path path-element="${apacheInstallerSourceDirectory}/ant_on_air/src"/>
			<source-path path-element="${apacheInstallerSourceDirectory}/ant_on_air/locale/{locale}"/>
			<source-path path-element="${mashLibrarySourceDirectory}/src"/>
			<source-path path-element="${LibraryHelperSharedCore}/src"/>
			<compiler.library-path dir="${mashLibrarySourceDirectory}/libs" append="true">
				<include name="*.swc" />
			</compiler.library-path>
			<library-path dir="${debug_dir}" includes="*.swc" append="true" />
			<compiler.library-path dir="${LibrarySDKInstallerHaxe}/bin/flash/bin" append="true">
				<include name="*.swc" />
			</compiler.library-path>
		</mxmlc>
	</target>
	
	<!-- Deletes temporary files for Windows -->
	<target name="disposeTempWindows" depends="normalSigningBuild,signedSigningBuild">
		<if>
			<equals arg1="${keepDebugFiles}" arg2="false"/>
			<then>
				<delete dir="${deploy_dir}/MoonshineSDKInstallerEXE" />
				<delete dir="${debug_dir}" />
				<delete dir="installer"/>
				<delete dir="images"/>
				<delete dir="helperResources"/>
				<delete dir="shellScripts"/>
			</then>
		</if>
	</target>
	
	<!-- Deletes temporary files for OSX -->
	<target name="disposeTempUNIX" depends="buildAppStorePKG">
		<if>
			<equals arg1="${keepDebugFiles}" arg2="false"/>
			<then>
				<delete dir="${debug_dir}" />
				<delete dir="installer"/>
				<delete dir="images"/>
				<delete dir="helperResources"/>
				<delete dir="shellScripts"/>
			</then>
		</if>
	</target>
</project>