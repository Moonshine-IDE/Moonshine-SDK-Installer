<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->

<project name="sdk_haxe_install" default="check-OS" basedir=".">

	<!--
	//==========================================================================
	//
	//  PROPERTIES
	//
	//==========================================================================
	-->

    <property name="haxe.version" value="${HAXE.VERSION}"/>
	<property name="haxe.download.server" value="${HAXE.DOWNLOAD.SERVER}"/>
	<property name="haxe.download.file" value="${HAXE.DOWNLOAD.FILE}"/>
	<property name="haxe.download.file.name.only" value="${HAXE.DOWNLOAD.FILE.NAME.ONLY}"/>
	<property name="neko.version" value="${NEKO.VERSION}"/>
	<property name="neko.download.server" value="${NEKO.DOWNLOAD.SERVER}"/>
	<property name="neko.download.file" value="${NEKO.DOWNLOAD.FILE}"/>
	<property name="neko.download.file.name.only" value="${NEKO.DOWNLOAD.FILE.NAME.ONLY}"/>
	<property name="neko.moonshine.directory" value="${NEKO.MOONSHINE.DIRECTORY}"/>
	<property name="haxe.temp.folder" value="temp/haxe"/>
	<property name="haxe.moonshine.directory" value="${HAXE.MOONSHINE.DIRECTORY}"/>
	<property name="haxe.windows.binary.unzip.folder" value="${HAXE.WINDOWS.UNZIPPED.FOLDER}" />

	<condition property="isMac" value="mac">
		<os family="mac" />
	</condition>
	<condition property="isWindows" value="windows">
		<os family="windows" />
	</condition>
	<condition property="isLinux" value="linux">
		<os family="unix" />
	</condition>
	
<!--
	//==========================================================================
	//
	//  TASKS
	//
	//==========================================================================
	-->
	
	<!-- OS Check and decision on opening Task -->
	<target name="check-OS" depends="runWindows,runMacOS">
	</target>

	<target name="runWindows" if="isWindows">
		<antcall target="dispose-temp-windows" />
	</target>

	<target name="runMacOS" if="isMac">
		<antcall target="dispose-temp-UNIX" />
	</target>
	
	<target name="get-haxe-sdk">
		<property name="haxe.sdk.directory" value="haxe-${haxe.version}"/>
		<mkdir dir="${basedir}/${haxe.temp.folder}" />
		<echo>Downloading Haxe SDK v.${haxe.version}</echo>
        <get src="${haxe.download.server}${haxe.download.file}" dest="${basedir}" verbose="on" quiet="true"/>
	</target>

	<target name="get-neko-sdk">
		<property name="neko.sdk.directory" value="neko-${neko.version}"/>
		<delete dir="${basedir}/${haxe.temp.folder}" />
		<mkdir dir="${basedir}/${haxe.temp.folder}" />
		<echo>Downloading Neko SDK v.${neko.download.file.version}</echo>
		<get src="${neko.download.server}${neko.download.file}" dest="${basedir}" verbose="on" quiet="true"/>
	</target>
	
	<target name="unzip-haxe-sdk">
		<echo>Starting to unzip: ${basedir}/${haxe.download.file}</echo>
        <unzip src="${basedir}/${haxe.download.file}" dest="${basedir}/${haxe.temp.folder}"/>
		<echo>Completed unzipping Haxe SDK</echo>
	</target>

	<target name="unzip-neko-sdk">
		<echo>Starting to unzip: ${basedir}/${neko.download.file}</echo>
		<unzip src="${basedir}/${neko.download.file}" dest="${basedir}/${haxe.temp.folder}"/>
		<echo>Completed unzipping Neko SDK</echo>
	</target>
	
	<target name="untar-haxe-sdk">
		<echo>Starting to untar: ${basedir}/${haxe.download.file}</echo>
		<exec executable="tar" dir="${basedir}/${haxe.temp.folder}">
            <arg value="-xvf" />
            <arg value="${basedir}/${haxe.download.file}" />
			<arg value="--strip-components"/>
			<arg value="1"/>
        </exec>
		<echo>Completed untar Haxe SDK</echo>
	</target>

	<target name="untar-neko-sdk">
		<echo>Starting to untar: ${basedir}/${neko.download.file}</echo>
		<exec executable="tar" dir="${basedir}/${haxe.temp.folder}">
			<arg value="-xvf" />
			<arg value="${basedir}/${neko.download.file}" />
			<arg value="--strip-components"/>
			<arg value="1"/>
		</exec>
		<echo>Completed untar Haxe SDK</echo>
	</target>

	<target name="run-mac-haxelib-setup" if="isMac">
		<echo>Installing Haxelib</echo>
		<exec executable="bash">
			<arg value="-c"/>
			<arg value="echo '${haxe.moonshine.directory}/lib' | '${haxe.moonshine.directory}/${haxe.sdk.directory}'/haxelib setup"/>
		</exec>
		<echo>Completed Haxelib setup</echo>
	</target>
	
	<target name="run-win-haxelib-setup" if="isWindows">
		<echo>Installing Haxelib</echo>
		<exec executable="${haxe.moonshine.directory}/${haxe.sdk.directory}/haxelib">
			<arg value="setup"/>
			<arg value="--always"/>
			<arg value="${haxe.moonshine.directory}/lib"/>
		</exec>
		<echo>Completed Haxelib setup</echo>
	</target>
	
	<target name="run-additional-setup" depends="run-mac-haxelib-setup,run-win-haxelib-setup">
		<echo>Downloading and installing FeathersUI library</echo>
		<exec executable="${haxe.moonshine.directory}/${haxe.sdk.directory}/haxelib" failonerror="true">
			<arg value="install"/>
			<arg value="feathersui"/>
			<arg value="--quiet"/>
		</exec>
		<echo>Completed FeathersUI setup</echo>
		<echo>Downloading and installing OpenFl library</echo>
		<exec executable="${haxe.moonshine.directory}/${haxe.sdk.directory}/haxelib" failonerror="true">
			<arg value="install"/>
			<arg value="openfl"/>
			<arg value="--quiet"/>
		</exec>
		<echo>Completed OpenFl setup</echo>
		<echo>Downloading and installing Actuate library</echo>
		<exec executable="${haxe.moonshine.directory}/${haxe.sdk.directory}/haxelib" failonerror="true">
			<arg value="install"/>
			<arg value="actuate"/>
			<arg value="--quiet"/>
		</exec>
		<echo>Completed Actuate setup</echo>
		<echo>Downloading and installing Lime library</echo>
		<exec executable="${haxe.moonshine.directory}/${haxe.sdk.directory}/haxelib" failonerror="true">
			<arg value="install"/>
			<arg value="lime"/>
			<arg value="--quiet"/>
		</exec>
		<echo>Completed Lime setup</echo>
	</target>
	
	<target name="mac-copy-haxe-dir" if="isMac" description="copies a directory using exec and rsync so that symbolic links are preserved">
        <echo>Moving files to SDK directory ${haxe.moonshine.directory}/${haxe.sdk.directory}</echo>
		<mkdir dir="${haxe.moonshine.directory}/${haxe.sdk.directory}"/>
        <exec executable="rsync" dir="${basedir}">
            <arg value="--archive" />
            <arg value="--ignore-existing" />
            <arg value="--force" />
            <arg value="${basedir}/${haxe.temp.folder}/."/>
            <arg value="${haxe.moonshine.directory}/${haxe.sdk.directory}" />
        </exec>
    </target>

	<target name="mac-copy-neko-dir" if="isMac" description="copies a directory using exec and rsync so that symbolic links are preserved">
		<echo>Moving files to SDK directory ${neko.moonshine.directory}/${neko.sdk.directory}</echo>
		<mkdir dir="${neko.moonshine.directory}/${neko.sdk.directory}"/>
		<exec executable="rsync" dir="${basedir}">
			<arg value="--archive" />
			<arg value="--ignore-existing" />
			<arg value="--force" />
			<arg value="${basedir}/${haxe.temp.folder}/."/>
			<arg value="${neko.moonshine.directory}/${neko.sdk.directory}" />
		</exec>
	</target>
	
	<target name="win-copy-haxe-dir" if="isWindows" description="copies a directory using exec and rsync so that symbolic links are preserved">
        <echo>Moving files to SDK directory ${haxe.moonshine.directory}/${haxe.sdk.directory}</echo>
		<mkdir dir="${haxe.moonshine.directory}/${haxe.sdk.directory}"/>
        <copy todir="${haxe.moonshine.directory}/${haxe.sdk.directory}" overwrite="true">
        	<!-- using the AS Ant library I don't see anymore workaround to determine the folder name or copied from an wild-card-named folder -->
        	<fileset dir="${basedir}/${haxe.temp.folder}/haxe_20211022152000_ab0c054">
        		<include name="**"/>
        	</fileset>
		</copy>
		<echo>Files moved into ${haxe.moonshine.directory}/${haxe.sdk.directory}</echo>
    </target>

	<target name="win-copy-neko-dir" if="isWindows" description="copies a directory using exec and rsync so that symbolic links are preserved">
		<echo>Moving files to SDK directory ${neko.moonshine.directory}/${neko.sdk.directory}</echo>
		<mkdir dir="${neko.moonshine.directory}/${neko.sdk.directory}"/>
		<copy todir="${neko.moonshine.directory}/${neko.sdk.directory}" overwrite="true">
			<!-- using the AS Ant library I don't see anymore workaround to determine the folder name or copied from an wild-card-named folder -->
			<fileset dir="${basedir}/${haxe.temp.folder}/${neko.download.file.name.only}"/>
		</copy>
		<echo>Files moved into ${neko.moonshine.directory}/${neko.sdk.directory}</echo>
	</target>
		
	<!-- Deletes temporary files for Windows -->
	<target name="dispose-temp-windows" depends="get-haxe-sdk,unzip-haxe-sdk,win-copy-haxe-dir,run-additional-setup,get-neko-sdk,unzip-neko-sdk,win-copy-neko-dir">
		<delete dir="${basedir}/${haxe.temp.folder}" />
		<delete file="${basedir}/${haxe.download.file}" />
		<delete file="${basedir}/${neko.download.file}" />
		<echo>Deleted temp files.</echo>
	</target>
	<target name="dispose-temp-UNIX" depends="get-haxe-sdk,untar-haxe-sdk,mac-copy-haxe-dir,run-additional-setup,get-neko-sdk,untar-neko-sdk,mac-copy-neko-dir">
		<delete dir="${basedir}/${haxe.temp.folder}" />
		<delete file="${basedir}/${haxe.download.file}" />
		<delete file="${basedir}/${neko.download.file}" />
		<echo>Deleted temp files.</echo>
	</target>
</project>
