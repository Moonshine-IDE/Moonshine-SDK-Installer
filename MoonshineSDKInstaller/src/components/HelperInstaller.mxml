<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="onComplete(event)"
		 xmlns:components="components.*" xmlns:controls="ws.tink.spark.controls.*"
		 horizontalAlign="center" gap="0">
	<fx:Script>
		<![CDATA[
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import actionScripts.events.HelperEvent;
			import actionScripts.locator.HelperModel;
			import actionScripts.managers.CookieManager;
			import actionScripts.managers.GitSVNDetector;
			import actionScripts.utils.FileUtils;
			import actionScripts.utils.HelperUtils;
			import actionScripts.utils.MoonshineNotifier;
			import actionScripts.utils.Parser;
			import actionScripts.valueObjects.ComponentTypes;
			import actionScripts.valueObjects.ComponentVO;
			import actionScripts.valueObjects.ComponentVariantVO;
			import actionScripts.valueObjects.HelperConstants;
			
			import assets.skins.DarkButtonSkin;
			
			import org.apache.flex.packageflexsdk.resource.ViewResourceConstants;
			import org.apache.flex.packageflexsdk.util.ArchiveDownloader;
			import org.apache.flex.packageflexsdk.view.events.GenericEvent;
			
			//--------------------------------------------------------------------------
			//
			//  STATIC VARIABLES
			//
			//--------------------------------------------------------------------------
			
			private static var INSTALLER_APACHE_FLEX:InstallApacheFlex;
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE VARIABLES
			//
			//--------------------------------------------------------------------------
			
			[Bindable] private var sdkPathMessage:String;
			[Bindable] private var isDownloadInProgress:Boolean;
			[Bindable] private var allInstallButtonLabel:String = "INSTALL EVERYTHING NOW!";
			
			private var model:HelperModel = HelperModel.getInstance();
			private var packageLists:Array = [];
			private var archiveDownloader:ArchiveDownloader;
			private var viewResourceConstants:ViewResourceConstants;
			private var itemDownloading:ComponentVO;
			
			private var _moonshineNotifier:MoonshineNotifier;
			private function get moonshineNotifier():MoonshineNotifier
			{
				if (!_moonshineNotifier) _moonshineNotifier = new MoonshineNotifier();
				return _moonshineNotifier;
			}
			
			private function get allInstallConfirmHandler():Function
			{
				return function():void
				{
					proceedAllInstallation();
				};
			}
			
			private function get singleInstallConfirmHandler():Function
			{
				return function(item:ComponentVO):void
				{
					item.isSelectedToDownload = true;
					packageLists.push(item);
					if (!isDownloadInProgress) flush();
				};
			}
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE API
			//
			//--------------------------------------------------------------------------
			
			private function onComplete(event:FlexEvent):void
			{
				btnInstallAll.label = allInstallButtonLabel;
				
				// initiate the original installer source
				INSTALLER_APACHE_FLEX = new InstallApacheFlex();
				INSTALLER_APACHE_FLEX.moonshineAIRversion = HelperConstants.CONFIG_AIR_VERSION;
				INSTALLER_APACHE_FLEX.moonshineFlexVersion = "4.16.1"; // default value irrespective of configuration XML
				INSTALLER_APACHE_FLEX.addEventListener(GenericEvent.INSTALLER_READY, onInstallerIsReady, false, 0, true);
				INSTALLER_APACHE_FLEX.addEventListener(GenericEvent.INSTALL_ABORTED, onInstallAborted, false, 0, true);
				INSTALLER_APACHE_FLEX.addEventListener(GenericEvent.INSTALL_PROGRESS, onInstallProgress, false, 0, true);
				INSTALLER_APACHE_FLEX.addEventListener(GenericEvent.INSTALL_FINISH, onInstallationFinished, false, 0, true);
				INSTALLER_APACHE_FLEX.addEventListener("messageChanged", onMessageUpdates, false, 0, true);
				INSTALLER_APACHE_FLEX.handleApplicationComplete(null);
				
				sdkPathMessage = HelperConstants.IS_CUSTOM_WINDOWS_PATH ? HelperConstants.CUSTOM_PATH_SDK_WINDOWS : 
					HelperConstants.DEFAULT_INSTALLATION_PATH.nativePath;
			}
			
			private function openLicenseView(completion:Function, singleViewItem:ComponentVO=null, showAsNonInstallView:Boolean=false):void
			{
				var licenses:AllLicenseView = AllLicenseView(PopUpManager.createPopUp(this, AllLicenseView , true));
				licenses.width = this.width * .9;
				licenses.height = this.height * .8;
				licenses.confirmHandler = completion;
				licenses.singleLicenseItem = singleViewItem;
				licenses.showAsNonInstallView = showAsNonInstallView;
				PopUpManager.centerPopUp(licenses);
			}
			
			private function proceedAllInstallation():void
			{
				// generate list of downloads
				for each (var item:ComponentVO in model.components.source)
				{
					if (!item.isAlreadyDownloaded)
					{
						item.isSelectedToDownload = true;
						packageLists.push(item);
					}
				}
				
				// start download process
				btnInstallAll.enabled = false;
				flush();
			}
			
			private function prepareBeforeDownloads():void
			{
				// save custom path as necessary
				if (!HelperConstants.IS_MACOS && HelperConstants.CUSTOM_PATH_SDK_WINDOWS)
				{
					CookieManager.getInstance().setWindowsCustomPath(HelperConstants.CUSTOM_PATH_SDK_WINDOWS);
				}
				
				// create root directory
				if (!HelperConstants.DEFAULT_INSTALLATION_PATH.exists) HelperConstants.DEFAULT_INSTALLATION_PATH.createDirectory();
				
				var sdkSubDir:File;
				var sdkFolderName:String;
				
				// generate sub-folders
				for each (var item:ComponentVO in model.components.source)
				{
					switch (item.type)
					{
						case ComponentTypes.TYPE_FLEX:
							sdkSubDir = HelperConstants.DEFAULT_INSTALLATION_PATH.resolvePath("Flex_SDK");
							break;
						case ComponentTypes.TYPE_ROYALE:
							sdkSubDir = HelperConstants.DEFAULT_INSTALLATION_PATH.resolvePath("Royale_SDK");
							break;
						case ComponentTypes.TYPE_ANT:
							sdkSubDir = HelperConstants.DEFAULT_INSTALLATION_PATH.resolvePath("Ant");
							break;
						case ComponentTypes.TYPE_MAVEN:
							sdkSubDir = HelperConstants.DEFAULT_INSTALLATION_PATH.resolvePath("Maven");
							break;
						case ComponentTypes.TYPE_OPENJAVA:
							sdkSubDir = HelperConstants.DEFAULT_INSTALLATION_PATH.resolvePath("Java");
							break;
					}
					
					// create the sub-directory if not exists
					if (!sdkSubDir.exists) sdkSubDir.createDirectory();
				}
			}
			
			private function flush():void
			{
				if (packageLists.length != 0 && !isDownloadInProgress) 
				{
					prepareBeforeDownloads();
				}
				
				if (packageLists.length != 0)
				{
					isDownloadInProgress = true;
					progressBar.visible = lblLastMessage.visible = true;
					startSingleInstallation(packageLists.shift());
				}
				else
				{
					isDownloadInProgress = false;
					progressBar.visible = false;
					HelperConstants.IS_ALLOWED_TO_CHOOSE_CUSTOM_PATH = false;
				}
			}
			
			private function startSingleInstallation(item:ComponentVO):void
			{
				itemDownloading = item;
				itemDownloading.hasError = null;
				switch (item.type)
				{
					case ComponentTypes.TYPE_FLEX:
						item.isDownloading = true;
						INSTALLER_APACHE_FLEX.setFlexPath(item.installToPath);
						INSTALLER_APACHE_FLEX.moonshineAIRversion = HelperConstants.CONFIG_AIR_VERSION;
						INSTALLER_APACHE_FLEX.moonshineFlexVersion = HelperUtils.getComponentByType(ComponentTypes.TYPE_FLEX).version;
						INSTALLER_APACHE_FLEX.startInstallation();
						break;
					case ComponentTypes.TYPE_FEATHERS:
						var feathersObjectForApacheInstaller:Object = Parser.getFeathersObjectForApacheInstaller();
						item.isDownloading = true;
						INSTALLER_APACHE_FLEX.setFlexPath(item.installToPath);
						INSTALLER_APACHE_FLEX.moonshineAIRversion = HelperConstants.CONFIG_AIR_VERSION;
						INSTALLER_APACHE_FLEX.moonshineFlexVersion = feathersObjectForApacheInstaller.version;
						INSTALLER_APACHE_FLEX.startInstallationFeathers(feathersObjectForApacheInstaller);
						break;
					case ComponentTypes.TYPE_GIT:
					case ComponentTypes.TYPE_SVN:
						if (HelperConstants.IS_MACOS) 
						{
							progressBar.visible = lblLastMessage.visible = false;
							GitSVNDetector.getInstance().installXCodeCommandLine(onGitSVNInstallMacOS);
							return;
						}
					default:
						archiveDownloader = new ArchiveDownloader(item);
						archiveDownloader.installerApacheFlexInstance = INSTALLER_APACHE_FLEX;
						archiveDownloader.viewResourceConstants = viewResourceConstants;
						archiveDownloader.startInstallation();
						break;
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  LISTENERS API
			//
			//--------------------------------------------------------------------------
			
			private function onInstallerIsReady(event:GenericEvent):void
			{
				INSTALLER_APACHE_FLEX.removeEventListener(GenericEvent.INSTALLER_READY, onInstallerIsReady);
				viewResourceConstants = INSTALLER_APACHE_FLEX.viewResourceConstants;
				HelperConstants.IS_INSTALLER_READY = true;
				// TODO: next ui settlements
			}
			
			private function onInstallAborted(event:GenericEvent):void
			{
				if (itemDownloading)
				{
					itemDownloading.isDownloading = false;
					itemDownloading.isSelectedToDownload = false;
					itemDownloading.hasError = event.value ? event.value as String : null;
					flush();
				}
			}
			
			private function onInstallProgress(event:GenericEvent):void
			{
				progressBar.percent = event.value as Number;
			}
			
			private function onInstallationFinished(event:GenericEvent):void
			{
				// TEMPORARY PATCH-FIX
				// https://github.com/prominic/Moonshine-SDK-Installer/issues/17
				// should be removed when Apache introduce their own fix
				if (itemDownloading.type == ComponentTypes.TYPE_ROYALE)
				{
					var variantVO:ComponentVariantVO = itemDownloading.downloadVariants.getItemAt(itemDownloading.selectedVariantIndex) as ComponentVariantVO;
					if (variantVO.title == ComponentVariantVO.TYPE_STABLE)
					{
						var timeoutValue:uint = setTimeout(function():void
						{
							clearTimeout(timeoutValue);
							var fileToPatch:File = (new File(itemDownloading.installToPath)).resolvePath("royale-asjs/frameworks/royale-config.xml");
							if (fileToPatch.exists)
							{
								var fileToPatchWith:File = File.applicationDirectory.resolvePath("images/royale-config.xml");
								FileUtils.copyFile(fileToPatchWith, fileToPatch, true);
							}
						}, 1000);
					}
				}
				
				// sometime distributed zip/tar creates an additional
				// folder to the target directory which became complicated
				// to determine a proper path to the sdk internally
				// in that case we should make sure everything place in 
				// the folder that SDK Installer selects
				var installedPath:File = new File(itemDownloading.installToPath);
				var files:Array = installedPath.getDirectoryListing();
				if (files.length == 1)
				{
					FileUtils.moveFolderToDestinationFolderAsync(files[0], installedPath, onFileFoldersMoved, onFileFoldersMoveError,
						(itemDownloading.type == ComponentTypes.TYPE_OPENJAVA && HelperConstants.IS_MACOS) ? "Contents/Home" : null);
				}
				else
				{
					flushDownloadQueue();
				}
				
				/*
				 * @local
				 */
				function onFileFoldersMoved():void
				{
					flushDownloadQueue();
				}
				function onFileFoldersMoveError(error:String):void
				{
					trace(error);
					// terminate by some means?
				}
				function flushDownloadQueue():void
				{
					itemDownloading.isDownloaded = true;
					itemDownloading.isDownloading = false;
					itemDownloading.isSelectedToDownload = false;
					itemDownloading.isAlreadyDownloaded = true;
					
					if (!HelperConstants.IS_MACOS) onGitSVNInstallWindows(itemDownloading);
					moonshineNotifier.notifyMoonshineWithUpdate();
					
					flush();
				}
			}
			
			private function onMessageUpdates(event:Event):void
			{
				lblLastMessage.text = INSTALLER_APACHE_FLEX.lastFilteredPublicMessage;
			}
			
			private function onDownloadAComponentRequested(event:HelperEvent):void
			{
				openLicenseView(singleInstallConfirmHandler, (event.value as ComponentVO));
			}
			
			private function onOpenAComponentLicenseRequested(event:HelperEvent):void
			{
				openLicenseView(singleInstallConfirmHandler, (event.value as ComponentVO), true);
			}
			
			private function onAllComponentsFinishDetection(event:HelperEvent):void
			{
				view.removeEventListener(HelperEvent.ALL_COMPONENTS_TESTED, onAllComponentsFinishDetection);
				
				// determine disk-usage for total pending
				updateAllInstallButtonLabel();
				
				view.addEventListener(HelperEvent.COMPONENT_DOWNLOADED, onEachComponentDownloaded, false, 0, true);
			}
			
			private function onEachComponentDownloaded(event:HelperEvent):void
			{
				// update total pending size after each downloads
				updateAllInstallButtonLabel();
			}
			
			private function updateAllInstallButtonLabel():void
			{
				btnInstallAll.label = allInstallButtonLabel +" ("+ HelperUtils.getTotalDiskSizePendingItems() +")";
			}
			
			private function onShowLog(event:MouseEvent):void
			{
				INSTALLER_APACHE_FLEX.showConsole(event);
			}
			
			private function onGitSVNInstallMacOS(value:String, type:String):void
			{
				var gitComponent:ComponentVO = HelperUtils.getComponentByType(ComponentTypes.TYPE_GIT);
				var svnComponent:ComponentVO = HelperUtils.getComponentByType(ComponentTypes.TYPE_SVN);
				
				if (type == HelperConstants.START)
				{
					// continue for other download in queue
					// while external installer opened 
					// by macos
					gitComponent.isSelectedToDownload = true;
					svnComponent.isSelectedToDownload = true;
					flush();
					return;
				}
				else if (type == HelperConstants.ERROR && value)
				{
					// TODO: show error somewhere
					gitComponent.isAlreadyDownloaded = false;
					svnComponent.isAlreadyDownloaded = false;
				}
				else if (type == HelperConstants.SUCCESS)
				{
					gitComponent.isAlreadyDownloaded = svnComponent.isAlreadyDownloaded = true;
					gitComponent.isSelectedToDownload = svnComponent.isSelectedToDownload = false;
					gitComponent.installToPath = svnComponent.installToPath = value;
					moonshineNotifier.notifyMoonshineWithUpdate();
				}
				
				itemDownloading.isDownloading = false;
				flush();
			}
			
			private function onGitSVNInstallWindows(item:ComponentVO):void
			{
				// git and svn requires binary path
				// to the sdk folder on Windows
				if (item.type == ComponentTypes.TYPE_GIT || item.type == ComponentTypes.TYPE_SVN)
				{
					item.installToPath += File.separator + item.pathValidation;
				}
			}
			
			protected function onWindowsCustomPathRequest(event:MouseEvent):void
			{
				var customPath:File = new File();
				customPath.addEventListener(Event.SELECT, onSelectHandler);
				customPath.addEventListener(Event.CANCEL, onCancelHandler);
				customPath.browseForDirectory("Select SDK Location");
				
				/*
				*@local
				*/
				function onSelectHandler(event:Event):void
				{
					HelperUtils.updatePathWithCustomWindows(sdkPathMessage = (event.target as File).resolvePath(HelperConstants.DEFAULT_SDK_FOLDER_NAME).nativePath);
					onCancelHandler(event);
				}
				function onCancelHandler(event:Event):void
				{
					event.target.removeEventListener(Event.SELECT, onSelectHandler);
					event.target.removeEventListener(Event.CANCEL, onCancelHandler);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0x444444"/>
			</s:fill>
		</s:Rect>
		<s:Image id="textIcon" 
				 source="@Embed('/assets/images/logoMoonshine.png')"
				 horizontalCenter="0" verticalCenter="0"/>
	</s:Group>
	
	<s:Group width="100%" height="60">
		<s:Button id="btnInstallAll" 
				  click="openLicenseView(allInstallConfirmHandler)"
				  horizontalCenter="0" verticalCenter="0"
				  enabled="{HelperConstants.IS_INSTALLER_READY}"
				  icon="@Embed('/assets/images/icoDownloadSmall.png')"
				  styleName="greyButton"/>
		<s:Label id="lblInstalling" 
				 text="Installing packages.."
				 horizontalCenter="0" verticalCenter="0" 
				 fontFamily="DejaVuSans" color="0xdb5fce" fontSize="14"
				 visible="false" includeInLayout="false"/>
	</s:Group>
	
	<s:VGroup width="96%" height="100%"
			  horizontalAlign="center" verticalAlign="middle" paddingBottom="10">
		<components:HelperView id="view" 
							   width="100%" height="100%"
							   DOWNLOAD_COMPONENT="onDownloadAComponentRequested(event)"
							   OPEN_COMPONENT_LICENSE="onOpenAComponentLicenseRequested(event)"
							   ALL_COMPONENTS_TESTED="onAllComponentsFinishDetection(event)"
							   isRunningInsideMoonshine="false" paddingBottom="10"/>
		<s:VGroup width="100%"
				  verticalAlign="middle" horizontalAlign="center"
				  includeInLayout="{isDownloadInProgress || HelperConstants.IS_MACOS}" 
				  visible="{isDownloadInProgress || HelperConstants.IS_MACOS}">
			<controls:ProgressBar id="progressBar"
								  width="60%" height="10"
								  horizontalCenter="0" verticalCenter="0"
								  visible="false"/>
			<s:Label id="lblLastMessage"
					 textAlign="center"
					 width="70%" maxDisplayedLines="5"
					 horizontalCenter="0" verticalCenter="0"
					 visible="false"/>
		</s:VGroup>
		<s:HGroup width="100%" height="28"
				  horizontalAlign="center" verticalAlign="middle"
				  includeInLayout="{!isDownloadInProgress &amp;&amp; !HelperConstants.IS_MACOS}" 
				  visible="{!isDownloadInProgress &amp;&amp; !HelperConstants.IS_MACOS}">
			<s:Label text="Default SDK Location: {sdkPathMessage}"
					 maxDisplayedLines="2"
					 styleName="uiTextRendererDescription"/>
			<s:Label text="Change"
					 styleName="uiTextRendererDescription" textDecoration="underline" color="0x0099ff"
					 buttonMode="true" click="onWindowsCustomPathRequest(event)"
					 includeInLayout="{HelperConstants.IS_ALLOWED_TO_CHOOSE_CUSTOM_PATH}"
					 visible="{HelperConstants.IS_ALLOWED_TO_CHOOSE_CUSTOM_PATH}"/>
		</s:HGroup>
	</s:VGroup>
	
	<s:Group width="100%" height="70">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="0x444444"/>
			</s:fill>
		</s:Rect>
		<s:Rect height="10" width="100%">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0x303030"/>
					<s:GradientEntry color="0x444444"/>
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
		<s:Button id="installLogBtn"
				  skinClass="assets.skins.DarkButtonSkin"
				  height="32" width="160"
				  label="INSTALL LOG"
				  horizontalCenter="0" verticalCenter="0"
				  click="onShowLog(event)"/>
	</s:Group>
</s:VGroup>