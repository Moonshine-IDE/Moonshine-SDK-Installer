<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   title="License Agreement" creationComplete="onAllLicenseViewCreationComplete()"
			   close="onWindowClose(event)">
	<fx:Script>
		<![CDATA[
			import flash.net.navigateToURL;
			
			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			import actionScripts.locator.HelperModel;
			import actionScripts.valueObjects.ComponentTypes;
			import actionScripts.valueObjects.ComponentVO;
			
			import assets.skins.LightButtonSkin;
			
			import org.apache.flex.packageflexsdk.model.InstallerComponentVO;
			import org.apache.flex.packageflexsdk.util.ApacheURLLoader;
			
			import renderers.TourDeTreeItemRenderer;
			
			[Bindable] public var singleLicenseItem:ComponentVO;
			[Bindable] public var showAsNonInstallView:Boolean;
			
			public var isLicensesAccepted:Boolean;
			public var confirmHandler:Function;
			
			[Bindable] private var copyrightComponentsDataProvider:ArrayCollection = new ArrayCollection();
			[Bindable] private var currentLicenseLabel:String;
			[Bindable] private var currentLicenseURL:String;
			
			private var model:HelperModel = HelperModel.getInstance();
			private var isHarmanAIRDownload:Boolean;
			
			private function onAllLicenseViewCreationComplete():void
			{
				if (model.components.length == 0) return;
				
				// load between single or multiple
				if (singleLicenseItem && 
					(singleLicenseItem.type != ComponentTypes.TYPE_FLEX && 
					singleLicenseItem.type != ComponentTypes.TYPE_FLEX_HARMAN)) 
				{
					loadSingleLicenseItem();
				}				
				else 
				{
					loadAllLicenseItems();
				}
			}
			
			private function loadSingleLicenseItem():void
			{
				addMoreLicenses(singleLicenseItem.type);
				hgButtons.removeElement(biCopyrights);
				installComponentsList.callLater(function():void
				{
					installComponentsList.expandItem(copyrightComponentsDataProvider[0], true);
					installComponentsList.selectedItem = copyrightComponentsDataProvider[0].children[0];
					installComponentsList.dispatchEvent(new ListEvent(ListEvent.CHANGE));
				});
			}
			
			private function loadAllLicenseItems():void
			{
				// we need to parse different license items
				// from apache website
				var flexItem:ComponentVO;
				for each (var item:ComponentVO in model.components.source)
				{
					if (item.type == singleLicenseItem.type)
					{
						flexItem = item;
						break;
					}
				}
				
				if (flexItem)
				{
					isHarmanAIRDownload = (flexItem.licenseUrl.indexOf("harman") != -1);

					var req:URLRequest = new URLRequest(flexItem.licenseUrl);
					var loader:ApacheURLLoader = new ApacheURLLoader();
					loader.dataFormat = URLLoaderDataFormat.TEXT;
					attachLoaderListeners(loader, true);
					loader.load(req);
				}
			}
			
			private function attachLoaderListeners(loader:ApacheURLLoader, attach:Boolean):void
			{
				if (attach)
				{
					loader.addEventListener(Event.COMPLETE, handleFlexCopyrightLoaded, false, 0, true);
					loader.addEventListener(ErrorEvent.ERROR, handleCopyrightXMLError, false, 0, true);
					loader.addEventListener(IOErrorEvent.IO_ERROR, handleCopyrightXMLError, false, 0, true);
				}
				else
				{
					loader.removeEventListener(Event.COMPLETE, handleFlexCopyrightLoaded);
					loader.removeEventListener(ErrorEvent.ERROR, handleCopyrightXMLError);
					loader.removeEventListener(IOErrorEvent.IO_ERROR, handleCopyrightXMLError);
					hgButtons.removeElement(biCopyrights);
				}
			}
			
			private function handleFlexCopyrightLoaded(event:Event):void
			{
				attachLoaderListeners(event.target as ApacheURLLoader, false);

				var data:XML = XML(event.target.data);
				var compDList:XMLList = data.component.copy();
				var tmpChildrens:ArrayCollection = new ArrayCollection();
				for each (var comp:XML in compDList)
				{
					var vo:InstallerComponentVO = new InstallerComponentVO(getLocalizedString(comp, "label"),
						getLocalizedString(comp, "message"), getLocalizedString(comp, "license"),
						getLocalizedString(comp, "licenseURL"),
						comp.@id.toString(), comp.@required.toString() == "true");
					tmpChildrens.addItem(vo);
				}
				
				copyrightComponentsDataProvider.addItem({
					label:"Apache Flex ®, " + (isHarmanAIRDownload ? "Harman AIR" : "Adobe® AIR®"),
					children:tmpChildrens
				});
				if (!singleLicenseItem) 
				{
					addMoreLicenses();
				}
			}
			
			private function handleCopyrightXMLError(event:Event):void
			{
				attachLoaderListeners(event.target as ApacheURLLoader, false);
			}
			
			private function getLocalizedString(xml:XML, propName:String):String
			{
				var compBundle:XMLList;
				for each (var locale:String in resourceManager.localeChain)
				{
					compBundle = xml[locale];
					if (compBundle.length() == 1)
					{
						if (propName)
						{
							var xmlList:XMLList = compBundle[0][propName];
							if (xmlList.length() == 1)
							{
								return xmlList[0].toString();
							}
						}
						else
						{
							var s:String = compBundle[0].toString();
							if (s.length > 0)
							{
								return s;
							}
						}
					}
				}
				return "";
			}
			
			private function addMoreLicenses(byType:String=""):void
			{
				var tmpChildrens:ArrayCollection;
				var installComponent:InstallerComponentVO;
				for each (var item:ComponentVO in model.components.source)
				{
					if ((item.type != ComponentTypes.TYPE_FLEX) && 
						(byType == "" || byType == item.type))
					{
						tmpChildrens = new ArrayCollection();
						installComponent = new InstallerComponentVO(item.installToPath.split(File.separator).pop(),
							item.licenseSmallDescription, item.licenseTitle,
							item.licenseUrl, "", true);
						tmpChildrens.addItem(installComponent);
						copyrightComponentsDataProvider.addItem({label:item.title, children:tmpChildrens});
						
						if (byType != "") break;
					}
				}
			}
			
			private function getIconForFile(object:Object):Class
			{
				return null;
			}
			
			protected function handleOptionalInstallsChange(event:Event):void
			{
				if (installComponentsList.dataDescriptor.isBranch(event.target.selectedItem)) 
				{
					return;
				}
				
				var selectedItem:InstallerComponentVO = InstallerComponentVO(event.target.selectedItem);
				optionalInstallsTxtArea.text = selectedItem.message;
				
				currentLicenseLabel = selectedItem.licenseName;
				currentLicenseURL = selectedItem.licenseURL;
			}
			
			protected function handleLicenceBtnClick(event:Event):void
			{
				navigateToURL(new URLRequest(currentLicenseURL), "_blank");
			}
			
			protected function onWindowClose(event:CloseEvent):void
			{
				PopUpManager.removePopUp(this);
			}
			
			protected function onAcceptLicenses(event:MouseEvent):void
			{
				isLicensesAccepted = true;
				confirmHandler(singleLicenseItem ? singleLicenseItem : null);
				onWindowClose(null);
			}
			
		]]>
	</fx:Script>
	
	<s:HGroup width="100%" height="100%"
		horizontalAlign="center"
		paddingRight="10" paddingLeft="10">
		<mx:Tree id="installComponentsList"
				 width="40%" height="100%"
				 itemRenderer="renderers.TourDeTreeItemRenderer"
				 dataProvider="{copyrightComponentsDataProvider}" labelField="label"
				 color="0xEEEEEE"
				 contentBackgroundColor="0x0"
				 rollOverColor="0x393939"
				 selectionColor="0x393939"
				 alternatingItemColors="[0x444444, 0x4d4c4c]"
				 verticalScrollBarStyleName="black"
				 borderVisible="false"
				 fontSize="14"
				 useRollOver="true"
				 iconFunction="{getIconForFile}"
				 borderStyle="none"
				 change="handleOptionalInstallsChange(event)"/>
		<s:VGroup width="60%"
				  height="100%"
				  horizontalAlign="center"
				  gap="5" paddingTop="10" paddingBottom="10">
			<s:Label text="{currentLicenseLabel}" fontWeight="bold"/>
			<s:TextArea id="optionalInstallsTxtArea" text="This installer will download software from multiple sites with various license agreements. Please click on each item on the left, read the license and confirm that you agree to the terms of each license by checking the checkbox next to it."
						fontSize="14"
						width="100%"
						height="100%"
						editable="false"/>
			<s:Button id="licenseLinkBtn"
					  label="View License"
					  skinClass="assets.skins.LightButtonSkin"
					  click="handleLicenceBtnClick(event)"
					  includeInLayout="{currentLicenseURL &amp;&amp; currentLicenseURL != ''}"
					  visible="{currentLicenseURL &amp;&amp; currentLicenseURL != ''}"/>
		</s:VGroup>
	</s:HGroup>
	<s:controlBarContent>
		<s:HGroup id="hgButtons" 
				  width="100%" horizontalAlign="center" verticalAlign="middle">
			<s:Button label="I ACCEPT THE LICENSE AGREEMENTS AND INSTALL{singleLicenseItem ? '' : ' ALL'}"
					  skinClass="assets.skins.DarkButtonSkin"
					  click="onAcceptLicenses(event)"
					  includeInLayout="{!showAsNonInstallView}" visible="{!showAsNonInstallView}"/>
			<s:BusyIndicator id="biCopyrights"/>
		</s:HGroup>
	</s:controlBarContent>
</s:TitleWindow>