<?xml version="1.0" encoding="utf-8"?>

<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->

<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="600" height="412" 
			   title="Update available"
			   xmlns:controls="ws.tink.spark.controls.*"
			   skinClass="ws.tink.spark.skins.controls.UpdaterDialogSkin">
	
	<fx:Script><![CDATA[
		
		import air.update.events.DownloadErrorEvent;
		import air.update.events.StatusUpdateEvent;
		import air.update.events.UpdateEvent;
		
		import com.riaspace.nativeApplicationUpdater.utils.HdiutilHelper;
		
		import mx.controls.Alert;
		import mx.core.Application;
		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;
		import mx.utils.DisplayUtil;
		
		import org.apache.flex.packageflexsdk.util.DownloadUtil;
		import org.apache.flex.utilities.common.Constants;
		import org.apache.flex.utilities.common.Tools;
		
		[Bindable] 
		private var _newVersion:String;
		
		private var _fileWindows:File;
		private var _fileMac:File;
		
		protected function handleYesBtnClick(event:MouseEvent):void
		{
			currentState = "downloading";
			downloadUpdater();
		}
		
		protected function downloadUpdater():void
		{
			var applicationExtension:String = Tools.getApplicationExtension();
			var downloadCompleteHandler:Function =  
				(applicationExtension == Constants.APPLICATION_EXTENSION_WIN) ? 
				handleWindowsInstallerDownloadComplete : handleMacInstallerDownloadComplete;
				
			var main:Object = FlexGlobals.topLevelApplication;
			
			var url:String = 
				main.installerAppPath + main.installerAppFileName + applicationExtension;
			
			DownloadUtil.download(url, downloadCompleteHandler, handleDownloadError, handleDownloadProgress);
		}
		
		protected function handleWindowsInstallerDownloadComplete(event:Event):void
		{
			_fileWindows = File.createTempFile();
			writeFileToDirectory(_fileWindows,event.target.data);
			installFromFile(_fileWindows);
		}
		
		protected function installFromFile(file:File):void
		{
			DownloadUtil.executeFile(file);
			setTimeout(NativeApplication.nativeApplication.exit, 200);
		}
		
		protected function handleMacInstallerDownloadComplete(event:Event):void
		{
			_fileMac = File.createTempFile();
			writeFileToDirectory(_fileMac,event.target.data);
			var hdiutilHelper:HdiutilHelper = new HdiutilHelper(_fileMac);
			hdiutilHelper.addEventListener(Event.COMPLETE, handleHdiutilHelperComplete);
			hdiutilHelper.addEventListener(ErrorEvent.ERROR, handleHdiutilHelperError);
			hdiutilHelper.attach();
		}
		
		private function handleHdiutilHelperComplete(event:Event):void
		{
			var hdiutilHelper:HdiutilHelper = event.target as HdiutilHelper;
			hdiutilHelper.removeEventListener(Event.COMPLETE, handleHdiutilHelperComplete);
			hdiutilHelper.removeEventListener(ErrorEvent.ERROR, handleHdiutilHelperError);
			
			var attachedDmg:File = new File(hdiutilHelper.mountPoint);
			var files:Array = attachedDmg.getDirectoryListing();
			
			if (files.length == 1)
			{
				var installFileFolder:File = File(files[0]).resolvePath("Contents/MacOS");
				var installFiles:Array = installFileFolder.getDirectoryListing();
				
				if (installFiles.length == 1)
				{
					installFromFile(installFiles[0]);
				}
				else
					dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, 
						"Contents/MacOS folder should contain only 1 install file!"));
			}
			else
			{
				dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, 
					"Mounted volume should contain only 1 install file!"));
			}
		}
		
		private function handleHdiutilHelperError(event:ErrorEvent):void
		{
			var hdiutilHelper:HdiutilHelper = event.target as HdiutilHelper;
			hdiutilHelper.removeEventListener(Event.COMPLETE, handleHdiutilHelperComplete);
			hdiutilHelper.removeEventListener(ErrorEvent.ERROR, handleHdiutilHelperError);
			
			dispatchEvent(new ErrorEvent(ErrorEvent.ERROR, false, false, 
				"Error attaching dmg file!"));
		}
		
		protected function handleDownloadProgress(event:ProgressEvent):void
		{
			var bytesTotal:int = event.bytesTotal;
			var bytesLoaded:int = event.bytesLoaded;
			var percentLoaded:int = Math.round(bytesLoaded*100/bytesTotal);
			progressBar.percent = percentLoaded;
		}
		
		
		private function handleDownloadError(event:Event):void
		{
			Alert.show("Error downloading update file, try again later.");
		}
		
		public function set latestVersion(value:String):void
		{
			_newVersion = value;
		}
		
		private function writeFileToDirectory(file:File,data:ByteArray):void
		{
			var fs:FileStream = new FileStream();
			fs.open(file, FileMode.WRITE);
			fs.writeBytes(data); 
			fs.close();
		}
		
		protected function handleNoBtnClick(event:MouseEvent):void
		{
			dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
		
	]]></fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="downloading" />
	</s:states>
	
	<s:HGroup width="100%" 
			top="210" 
			  horizontalCenter="0" 
			  verticalAlign="top">
		<s:VGroup width="100%" 
				  horizontalAlign="center">
			<s:Label text="New version ({_newVersion}) is available."
					 fontSize="14"/>
			<s:Label text="Do you want to download and install it?" 
					 fontSize="14"/>
			<controls:ProgressBar id="progressBar" 
								  width="80%" 
								  height="21" />
			<s:Spacer height="20" />
			<s:HGroup>
				<s:Button id="btnYes" 
						  height="30"
						  styleName="mainBtnStyle"
						  label="UPDATE" 
						  click="handleYesBtnClick(event)" 
						  enabled.downloading="false" />
				<s:Button id="btnNo" 
						  height="30"
						  styleName="negativeBtnStyle"
						  label="DON'T UPDATE" 
						  click="handleNoBtnClick(event)"
						  enabled.downloading="false" />
			</s:HGroup>
		</s:VGroup>
	</s:HGroup>
</s:TitleWindow>